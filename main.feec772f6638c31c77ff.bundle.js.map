{"version":3,"file":"main.feec772f6638c31c77ff.bundle.js","sources":["webpack:///./atoms sync \\.stories\\.(j|t)sx","webpack:///./atoms/button/button.stories.tsx","webpack:///./atoms/button/button.tsx","webpack:///./atoms/button/index.tsx","webpack:///./atoms/card/card.stories.tsx","webpack:///./atoms/card/card.tsx","webpack:///./atoms/card/index.tsx","webpack:///./atoms/divider/divider.tsx","webpack:///./atoms/divider/index.tsx","webpack:///./atoms/grid/grid.tsx","webpack:///./atoms/grid/index.tsx","webpack:///./atoms/icons/index.tsx","webpack:///./atoms/input/async-select.stories.tsx","webpack:///./atoms/input/autocomplete.tsx","webpack:///./atoms/input/checkbox.tsx","webpack:///./atoms/input/form-control.tsx","webpack:///./atoms/input/index.tsx","webpack:///./atoms/input/input-base.tsx","webpack:///./atoms/input/input.stories.tsx","webpack:///./atoms/input/input.tsx","webpack:///./atoms/input/label.tsx","webpack:///./atoms/input/radio.tsx","webpack:///./atoms/input/select.stories.tsx","webpack:///./atoms/input/select.tsx","webpack:///./atoms/input/text.tsx","webpack:///./atoms/modal/index.tsx","webpack:///./atoms/modal/modal.stories.tsx","webpack:///./atoms/modal/modal.tsx","webpack:///./atoms/paper/index.tsx","webpack:///./atoms/paper/paper.tsx","webpack:///./atoms/pickers/index.tsx","webpack:///./atoms/pickers/keyboard-date-time-picker.stories.tsx","webpack:///./atoms/pickers/keyboard-date-time-picker.tsx","webpack:///./atoms/progress/circular.tsx","webpack:///./atoms/progress/index.tsx","webpack:///./atoms/progress/linear.tsx","webpack:///./atoms/progress/progress.stories.tsx","webpack:///./atoms/snackbar/index.tsx","webpack:///./atoms/snackbar/snackbar.provider.tsx","webpack:///./atoms/snackbar/snackbar.stories.tsx","webpack:///./atoms/snackbar/snackbar.tsx","webpack:///./atoms/theme/index.tsx","webpack:///./atoms/theme/provider.tsx","webpack:///./atoms/timeline-circles-deprecated/timeline-circles.stories.tsx","webpack:///./atoms/timeline-circles-deprecated/timeline-circles.tsx","webpack:///./atoms/timeline/hooks.tsx","webpack:///./atoms/timeline/index.tsx","webpack:///./atoms/timeline/timeline.stories.tsx","webpack:///./atoms/timeline/timeline.tsx","webpack:///./atoms/timeline/tooltip.tsx","webpack:///./atoms/timeline/util.tsx","webpack:///./atoms/typography/index.tsx","webpack:///./atoms/typography/typography.tsx","webpack:///./atoms/zero-width-space/zero-width-space.tsx","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./node_modules/nested-object-assign/lib sync ^\\.\\/.*$","webpack:///./storybook/index.tsx","webpack:///./storybook/theme-decorator.tsx"],"sourcesContent":["var map = {\n\t\"./button/button.stories.tsx\": \"./atoms/button/button.stories.tsx\",\n\t\"./card/card.stories.tsx\": \"./atoms/card/card.stories.tsx\",\n\t\"./input/async-select.stories.tsx\": \"./atoms/input/async-select.stories.tsx\",\n\t\"./input/input.stories.tsx\": \"./atoms/input/input.stories.tsx\",\n\t\"./input/select.stories.tsx\": \"./atoms/input/select.stories.tsx\",\n\t\"./modal/modal.stories.tsx\": \"./atoms/modal/modal.stories.tsx\",\n\t\"./pickers/keyboard-date-time-picker.stories.tsx\": \"./atoms/pickers/keyboard-date-time-picker.stories.tsx\",\n\t\"./progress/progress.stories.tsx\": \"./atoms/progress/progress.stories.tsx\",\n\t\"./snackbar/snackbar.stories.tsx\": \"./atoms/snackbar/snackbar.stories.tsx\",\n\t\"./timeline-circles-deprecated/timeline-circles.stories.tsx\": \"./atoms/timeline-circles-deprecated/timeline-circles.stories.tsx\",\n\t\"./timeline/timeline.stories.tsx\": \"./atoms/timeline/timeline.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./atoms sync recursive \\\\.stories\\\\.(j|t)sx?$\";","import { select } from '@connexta/ace/@storybook/addon-knobs'\nimport * as React from 'react'\nimport { storiesOf } from '../../storybook'\nimport { Button } from './'\n\nconst stories = storiesOf('Components|Button', module)\n\nstories.add('Default', () => {\n  const variant = select(\n    'Variant',\n    {\n      Text: 'text',\n      Outlined: 'outlined',\n      Contained: 'contained',\n    },\n    'outlined'\n  ) as 'text' | 'outlined' | 'contained'\n\n  const size = select(\n    'Size',\n    {\n      Small: 'small',\n      Medium: 'medium',\n      Large: 'large',\n    },\n    'small'\n  ) as 'small' | 'medium' | 'large'\n\n  const color = select(\n    'Color',\n    {\n      Default: 'default',\n      Inherit: 'inherit',\n      Primary: 'primary',\n      Secondary: 'secondary',\n    },\n    'default'\n  ) as 'default' | 'inherit' | 'primary' | 'secondary'\n\n  return (\n    <Button variant={variant} size={size} color={color}>\n      Click Me\n    </Button>\n  )\n})\n","import * as React from 'react'\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton'\nimport Badge, { BadgeProps } from '@material-ui/core/Badge'\n\nimport styled from 'styled-components'\n\nexport const WrappedButton = styled(\n  React.forwardRef((props: ButtonProps, ref: React.Ref<any>) => {\n    return <Button {...props} ref={ref} />\n  })\n)<ButtonProps>`` as React.ComponentType<ButtonProps>\n\nexport const WrappedIconButton = styled(\n  React.forwardRef((props: IconButtonProps, ref: React.Ref<any>) => {\n    return <IconButton {...props} ref={ref} />\n  })\n)<IconButtonProps>`` as React.ComponentType<IconButtonProps>\n\nexport const WrappedBadge = styled(\n  React.forwardRef((props: BadgeProps, ref: React.Ref<any>) => {\n    return <Badge {...props} ref={ref} />\n  })\n)<BadgeProps>`` as React.ComponentType<BadgeProps>\n","export {\n  WrappedButton as Button,\n  WrappedIconButton as IconButton,\n  WrappedBadge as Badge,\n} from './button'\n","import * as React from 'react'\nimport { storiesOf } from '../../storybook'\nimport { CreateCard } from './'\nimport styled from 'styled-components'\n\nconst stories = storiesOf('Components | Card', module)\n\nconst Wrapper = styled.div`\n  width: 20%;\n`\n\nstories.add('Create Card', () => (\n  <Wrapper>\n    <CreateCard text=\"Add Card\" />\n  </Wrapper>\n))\n","import * as React from 'react'\nimport Card, { CardProps } from '@material-ui/core/Card'\nimport CardHeader, { CardHeaderProps } from '@material-ui/core/CardHeader'\nimport CardActions, { CardActionsProps } from '@material-ui/core/CardActions'\nimport CardContent, { CardContentProps } from '@material-ui/core/CardContent'\nimport CardActionArea, {\n  CardActionAreaProps,\n} from '@material-ui/core/CardActionArea'\nimport Typography, { TypographyProps } from '@material-ui/core/Typography'\nimport styled from 'styled-components'\nimport CreateIcon from '@material-ui/icons/AddBox'\nimport { ZeroWidthSpace } from '../zero-width-space/zero-width-space'\n\nexport const WrappedHeader = ({ title, ...otherProps }: CardHeaderProps) => {\n  return (\n    <CardHeader\n      title={\n        <>\n          {title}\n          <ZeroWidthSpace />\n        </>\n      }\n      {...otherProps}\n    />\n  )\n}\n\nexport const WrappedCard = styled(\n  React.forwardRef((props: CardProps, ref: React.Ref<any>) => {\n    return <Card {...props} ref={ref} />\n  })\n)<CardProps>`` as React.ComponentType<CardProps>\n\nexport const WrappedCardActions = styled(\n  React.forwardRef((props: CardActionsProps, ref: React.Ref<any>) => {\n    return <CardActions {...props} ref={ref} />\n  })\n)<CardActionsProps>`` as React.ComponentType<CardActionsProps>\n\nexport const WrappedCardContent = styled(\n  React.forwardRef((props: CardContentProps, ref: React.Ref<any>) => {\n    return <CardContent {...props} ref={ref} />\n  })\n)<CardContentProps>`` as React.ComponentType<CardContentProps>\n\nexport const WrappedCardContentLabel = (props: TypographyProps) => {\n  return <Typography {...props} noWrap style={{ opacity: 0.6 }} />\n}\n\nexport const WrappedCardContentValue = ({\n  children,\n  ...otherProps\n}: TypographyProps) => {\n  return (\n    <Typography {...otherProps} noWrap>\n      {children}\n      <ZeroWidthSpace />\n    </Typography>\n  )\n}\n\nexport const WrappedCardActionArea = styled(\n  React.forwardRef((props: CardActionAreaProps, ref: React.Ref<any>) => {\n    return <CardActionArea {...props} buttonRef={ref} />\n  })\n)<CardActionAreaProps>``\n\ntype CreateCardProps = {\n  text: string\n  cardProps?: CardProps\n}\n\nexport const CreateCard = styled(\n  React.forwardRef((props: CreateCardProps, ref: React.Ref<any>) => {\n    return (\n      <WrappedCard {...props.cardProps} ref={ref}>\n        <WrappedCardActionArea\n          style={{\n            height: '100%',\n            textAlign: 'center',\n          }}\n        >\n          <WrappedCardContent>\n            <CreateIcon\n              style={{\n                fontSize: '7rem',\n              }}\n            />\n            <h1>{props.text}</h1>\n          </WrappedCardContent>\n        </WrappedCardActionArea>\n      </WrappedCard>\n    )\n  })\n)<CreateCardProps>``\ntry {\n    // @ts-ignore\n    WrappedHeader.displayName = \"WrappedHeader\";\n    // @ts-ignore\n    WrappedHeader.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedHeader\", \"props\": { \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<CardHeaderClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/card/card.tsx#WrappedHeader\"] = { docgenInfo: WrappedHeader.__docgenInfo, name: \"WrappedHeader\", path: \"atoms/card/card.tsx#WrappedHeader\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    WrappedCardContentLabel.displayName = \"WrappedCardContentLabel\";\n    // @ts-ignore\n    WrappedCardContentLabel.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedCardContentLabel\", \"props\": { \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<TypographyClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/card/card.tsx#WrappedCardContentLabel\"] = { docgenInfo: WrappedCardContentLabel.__docgenInfo, name: \"WrappedCardContentLabel\", path: \"atoms/card/card.tsx#WrappedCardContentLabel\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    WrappedCardContentValue.displayName = \"WrappedCardContentValue\";\n    // @ts-ignore\n    WrappedCardContentValue.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedCardContentValue\", \"props\": { \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<TypographyClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/card/card.tsx#WrappedCardContentValue\"] = { docgenInfo: WrappedCardContentValue.__docgenInfo, name: \"WrappedCardContentValue\", path: \"atoms/card/card.tsx#WrappedCardContentValue\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    WrappedCardActionArea.displayName = \"WrappedCardActionArea\";\n    // @ts-ignore\n    WrappedCardActionArea.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedCardActionArea\", \"props\": { \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<CardActionAreaClassKey, string>>\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"buttonRef\": { \"defaultValue\": null, \"description\": \"Prefer `ref` instead.\", \"name\": \"buttonRef\", \"required\": false, \"type\": { \"name\": \"Ref<unknown>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/card/card.tsx#WrappedCardActionArea\"] = { docgenInfo: WrappedCardActionArea.__docgenInfo, name: \"WrappedCardActionArea\", path: \"atoms/card/card.tsx#WrappedCardActionArea\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    CreateCard.displayName = \"CreateCard\";\n    // @ts-ignore\n    CreateCard.__docgenInfo = { \"description\": \"\", \"displayName\": \"CreateCard\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/card/card.tsx#CreateCard\"] = { docgenInfo: CreateCard.__docgenInfo, name: \"CreateCard\", path: \"atoms/card/card.tsx#CreateCard\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export {\n  WrappedCard as Card,\n  WrappedCardActions as CardActions,\n  WrappedCardContent as CardContent,\n  WrappedHeader as CardHeader,\n  WrappedCardActionArea as CardActionArea,\n  WrappedCardContentLabel as CardContentLabel,\n  WrappedCardContentValue as CardContentValue,\n  CreateCard,\n} from './card'\n","import * as React from 'react'\nimport Divider, { DividerProps } from '@material-ui/core/Divider'\n\nexport const WrappedDivider = (props: DividerProps) => {\n  return <Divider {...props} />\n}\ntry {\n    // @ts-ignore\n    WrappedDivider.displayName = \"WrappedDivider\";\n    // @ts-ignore\n    WrappedDivider.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedDivider\", \"props\": { \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<DividerClassKey, string>>\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/divider/divider.tsx#WrappedDivider\"] = { docgenInfo: WrappedDivider.__docgenInfo, name: \"WrappedDivider\", path: \"atoms/divider/divider.tsx#WrappedDivider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { WrappedDivider as Divider } from './divider'\n","import * as React from 'react'\nimport Grid, { GridProps } from '@material-ui/core/Grid'\nimport styled from 'styled-components'\n\nexport const WrappedGrid = styled(\n  React.forwardRef((props: GridProps, ref: React.Ref<any>) => {\n    return <Grid {...props} ref={ref} />\n  })\n)<GridProps>`` as React.ComponentType<GridProps>\n\nconst GridItem = styled(WrappedGrid)`\n  > * {\n    height: 100%;\n  }\n`\n\ntype CardGridProps = {\n  gridProps?: GridProps\n  gridItemProps?: GridProps\n  children?: React.ReactNode\n}\n\nexport const WrappedCardGridItem = ({\n  children,\n  gridItemProps,\n}: CardGridProps) => {\n  return (\n    // @ts-ignore\n    <GridItem {...gridItemProps} item xs={12} sm={6} md={4} lg={3} xl={2}>\n      {children}\n    </GridItem>\n  )\n}\n\nexport const WrappedCardGrid = styled(\n  ({ gridProps, children }: CardGridProps) => {\n    return (\n      // @ts-ignore\n      <WrappedGrid\n        container\n        spacing={3}\n        direction=\"row\"\n        justify=\"flex-start\"\n        wrap=\"wrap\"\n        {...gridProps}\n      >\n        {children}\n      </WrappedGrid>\n    )\n  }\n)<CardGridProps>`` as React.ComponentType<CardGridProps>\ntry {\n    // @ts-ignore\n    WrappedCardGridItem.displayName = \"WrappedCardGridItem\";\n    // @ts-ignore\n    WrappedCardGridItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedCardGridItem\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/grid/grid.tsx#WrappedCardGridItem\"] = { docgenInfo: WrappedCardGridItem.__docgenInfo, name: \"WrappedCardGridItem\", path: \"atoms/grid/grid.tsx#WrappedCardGridItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export {\n  WrappedGrid as Grid,\n  WrappedCardGrid as CardGrid,\n  WrappedCardGridItem as CardGridItem,\n} from './grid'\n","import ViewHeadline from '@material-ui/icons/ViewHeadline'\nimport ViewModule from '@material-ui/icons/ViewModule'\nimport Close from '@material-ui/icons/Close'\nimport DefaultError from '@material-ui/icons/Error'\nimport ArrowLeft from '@material-ui/icons/ArrowBackIos'\nimport Remove from '@material-ui/icons/Remove'\nimport Info from '@material-ui/icons/Info'\nimport Add from '@material-ui/icons/Add'\nimport Menu from '@material-ui/icons/Menu'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Book from '@material-ui/icons/MenuBook'\nimport Apps from '@material-ui/icons/Apps'\nimport Installer from '@material-ui/icons/SettingsApplications'\nimport Notifications from '@material-ui/icons/Notifications'\nimport Settings from '@material-ui/icons/Settings'\n\nexport const ListModeIcon = ViewHeadline\nexport const CardModeIcon = ViewModule\nexport const CloseIcon = Close\nexport const ErrorIcon = DefaultError\nexport const BackIcon = ArrowLeft\nexport const RemoveIcon = Remove\nexport const InfoIcon = Info\nexport const AddIcon = Add\nexport const MenuIcon = Menu\nexport const ChevronLeftIcon = ChevronLeft\nexport const ChevronRightIcon = ChevronRight\nexport const BookIcon = Book\nexport const AppsIcon = Apps\nexport const InstallerIcon = Installer\nexport const NotificationsIcon = Notifications\nexport const SettingsIcon = Settings\ntry {\n    // @ts-ignore\n    ListModeIcon.displayName = \"ListModeIcon\";\n    // @ts-ignore\n    ListModeIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListModeIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#ListModeIcon\"] = { docgenInfo: ListModeIcon.__docgenInfo, name: \"ListModeIcon\", path: \"atoms/icons/index.tsx#ListModeIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    CardModeIcon.displayName = \"CardModeIcon\";\n    // @ts-ignore\n    CardModeIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"CardModeIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#CardModeIcon\"] = { docgenInfo: CardModeIcon.__docgenInfo, name: \"CardModeIcon\", path: \"atoms/icons/index.tsx#CardModeIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    CloseIcon.displayName = \"CloseIcon\";\n    // @ts-ignore\n    CloseIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"CloseIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#CloseIcon\"] = { docgenInfo: CloseIcon.__docgenInfo, name: \"CloseIcon\", path: \"atoms/icons/index.tsx#CloseIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ErrorIcon.displayName = \"ErrorIcon\";\n    // @ts-ignore\n    ErrorIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"ErrorIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#ErrorIcon\"] = { docgenInfo: ErrorIcon.__docgenInfo, name: \"ErrorIcon\", path: \"atoms/icons/index.tsx#ErrorIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    BackIcon.displayName = \"BackIcon\";\n    // @ts-ignore\n    BackIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"BackIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#BackIcon\"] = { docgenInfo: BackIcon.__docgenInfo, name: \"BackIcon\", path: \"atoms/icons/index.tsx#BackIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    RemoveIcon.displayName = \"RemoveIcon\";\n    // @ts-ignore\n    RemoveIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"RemoveIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#RemoveIcon\"] = { docgenInfo: RemoveIcon.__docgenInfo, name: \"RemoveIcon\", path: \"atoms/icons/index.tsx#RemoveIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    InfoIcon.displayName = \"InfoIcon\";\n    // @ts-ignore\n    InfoIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"InfoIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#InfoIcon\"] = { docgenInfo: InfoIcon.__docgenInfo, name: \"InfoIcon\", path: \"atoms/icons/index.tsx#InfoIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    AddIcon.displayName = \"AddIcon\";\n    // @ts-ignore\n    AddIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"AddIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#AddIcon\"] = { docgenInfo: AddIcon.__docgenInfo, name: \"AddIcon\", path: \"atoms/icons/index.tsx#AddIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    MenuIcon.displayName = \"MenuIcon\";\n    // @ts-ignore\n    MenuIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"MenuIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#MenuIcon\"] = { docgenInfo: MenuIcon.__docgenInfo, name: \"MenuIcon\", path: \"atoms/icons/index.tsx#MenuIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ChevronLeftIcon.displayName = \"ChevronLeftIcon\";\n    // @ts-ignore\n    ChevronLeftIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"ChevronLeftIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#ChevronLeftIcon\"] = { docgenInfo: ChevronLeftIcon.__docgenInfo, name: \"ChevronLeftIcon\", path: \"atoms/icons/index.tsx#ChevronLeftIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ChevronRightIcon.displayName = \"ChevronRightIcon\";\n    // @ts-ignore\n    ChevronRightIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"ChevronRightIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#ChevronRightIcon\"] = { docgenInfo: ChevronRightIcon.__docgenInfo, name: \"ChevronRightIcon\", path: \"atoms/icons/index.tsx#ChevronRightIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    BookIcon.displayName = \"BookIcon\";\n    // @ts-ignore\n    BookIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"BookIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#BookIcon\"] = { docgenInfo: BookIcon.__docgenInfo, name: \"BookIcon\", path: \"atoms/icons/index.tsx#BookIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    AppsIcon.displayName = \"AppsIcon\";\n    // @ts-ignore\n    AppsIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"AppsIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#AppsIcon\"] = { docgenInfo: AppsIcon.__docgenInfo, name: \"AppsIcon\", path: \"atoms/icons/index.tsx#AppsIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    InstallerIcon.displayName = \"InstallerIcon\";\n    // @ts-ignore\n    InstallerIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"InstallerIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#InstallerIcon\"] = { docgenInfo: InstallerIcon.__docgenInfo, name: \"InstallerIcon\", path: \"atoms/icons/index.tsx#InstallerIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    NotificationsIcon.displayName = \"NotificationsIcon\";\n    // @ts-ignore\n    NotificationsIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"NotificationsIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#NotificationsIcon\"] = { docgenInfo: NotificationsIcon.__docgenInfo, name: \"NotificationsIcon\", path: \"atoms/icons/index.tsx#NotificationsIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    SettingsIcon.displayName = \"SettingsIcon\";\n    // @ts-ignore\n    SettingsIcon.__docgenInfo = { \"description\": \"\", \"displayName\": \"SettingsIcon\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"Node passed into the SVG element.\", \"name\": \"children\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color of the component. It supports those theme colors that make sense for this component.\\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"action\\\" | \\\"disabled\\\" | \\\"error\\\"\" } }, \"component\": { \"defaultValue\": null, \"description\": \"The component used for the root node.\\nEither a string to use a DOM element or a component.\", \"name\": \"component\", \"required\": false, \"type\": { \"name\": \"ElementType<SVGProps<SVGSVGElement>>\" } }, \"fontSize\": { \"defaultValue\": null, \"description\": \"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\", \"name\": \"fontSize\", \"required\": false, \"type\": { \"name\": \"\\\"inherit\\\" | \\\"small\\\" | \\\"default\\\" | \\\"large\\\"\" } }, \"htmlColor\": { \"defaultValue\": null, \"description\": \"Applies a color attribute to the SVG element.\", \"name\": \"htmlColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"shapeRendering\": { \"defaultValue\": null, \"description\": \"The shape-rendering attribute. The behavior of the different options is described on the\\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\\nIf you are having issues with blurry icons you should investigate this property.\\n@document\", \"name\": \"shapeRendering\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"titleAccess\": { \"defaultValue\": null, \"description\": \"Provides a human-readable title for the element that contains it.\\nhttps://www.w3.org/TR/SVG-access/#Equivalent\", \"name\": \"titleAccess\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"viewBox\": { \"defaultValue\": null, \"description\": \"Allows you to redefine what the coordinates without units mean inside an SVG element.\\nFor example, if the SVG element is 500 (width) by 200 (height),\\nand you pass viewBox=\\\"0 0 50 20\\\",\\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\\nto bottom right (50,20) and each unit will be worth 10px.\", \"name\": \"viewBox\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-activedescendant\": { \"defaultValue\": null, \"description\": \"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\", \"name\": \"aria-activedescendant\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-atomic\": { \"defaultValue\": null, \"description\": \"Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\", \"name\": \"aria-atomic\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-autocomplete\": { \"defaultValue\": null, \"description\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\\npresented if they are made.\", \"name\": \"aria-autocomplete\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"inline\\\" | \\\"list\\\" | \\\"both\\\"\" } }, \"aria-busy\": { \"defaultValue\": null, \"description\": \"Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\", \"name\": \"aria-busy\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-checked\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"checked\\\" state of checkboxes, radio buttons, and other widgets.\\n@see aria-pressed\\n@see aria-selected.\", \"name\": \"aria-checked\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-colcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of columns in a table, grid, or treegrid.\\n@see aria-colindex.\", \"name\": \"aria-colcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colindex\": { \"defaultValue\": null, \"description\": \"Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\\n@see aria-colcount\\n@see aria-colspan.\", \"name\": \"aria-colindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-colspan\": { \"defaultValue\": null, \"description\": \"Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-colindex\\n@see aria-rowspan.\", \"name\": \"aria-colspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-controls\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) whose contents or presence are controlled by the current element.\\n@see aria-owns.\", \"name\": \"aria-controls\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-current\": { \"defaultValue\": null, \"description\": \"Indicates the element that represents the current item within a container or set of related elements.\", \"name\": \"aria-current\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"page\\\" | \\\"step\\\" | \\\"location\\\" | \\\"date\\\" | \\\"time\\\"\" } }, \"aria-describedby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that describes the object.\\n@see aria-labelledby\", \"name\": \"aria-describedby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-details\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides a detailed, extended description for the object.\\n@see aria-describedby.\", \"name\": \"aria-details\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-disabled\": { \"defaultValue\": null, \"description\": \"Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\\n@see aria-hidden\\n@see aria-readonly.\", \"name\": \"aria-disabled\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-dropeffect\": { \"defaultValue\": null, \"description\": \"Indicates what functions can be performed when a dragged object is released on the drop target.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-dropeffect\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"copy\\\" | \\\"execute\\\" | \\\"link\\\" | \\\"move\\\" | \\\"popup\\\"\" } }, \"aria-errormessage\": { \"defaultValue\": null, \"description\": \"Identifies the element that provides an error message for the object.\\n@see aria-invalid\\n@see aria-describedby.\", \"name\": \"aria-errormessage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-expanded\": { \"defaultValue\": null, \"description\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\", \"name\": \"aria-expanded\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-flowto\": { \"defaultValue\": null, \"description\": \"Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\\nallows assistive technology to override the general default of reading in document source order.\", \"name\": \"aria-flowto\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-grabbed\": { \"defaultValue\": null, \"description\": \"Indicates an element's \\\"grabbed\\\" state in a drag-and-drop operation.\\n@deprecated in ARIA 1.1\", \"name\": \"aria-grabbed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-haspopup\": { \"defaultValue\": null, \"description\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\", \"name\": \"aria-haspopup\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"menu\\\" | \\\"listbox\\\" | \\\"tree\\\" | \\\"grid\\\" | \\\"dialog\\\"\" } }, \"aria-hidden\": { \"defaultValue\": null, \"description\": \"Indicates whether the element is exposed to an accessibility API.\\n@see aria-disabled.\", \"name\": \"aria-hidden\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-invalid\": { \"defaultValue\": null, \"description\": \"Indicates the entered value does not conform to the format expected by the application.\\n@see aria-errormessage.\", \"name\": \"aria-invalid\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"grammar\\\" | \\\"spelling\\\"\" } }, \"aria-keyshortcuts\": { \"defaultValue\": null, \"description\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\", \"name\": \"aria-keyshortcuts\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-label\": { \"defaultValue\": null, \"description\": \"Defines a string value that labels the current element.\\n@see aria-labelledby.\", \"name\": \"aria-label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-labelledby\": { \"defaultValue\": null, \"description\": \"Identifies the element (or elements) that labels the current element.\\n@see aria-describedby.\", \"name\": \"aria-labelledby\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-level\": { \"defaultValue\": null, \"description\": \"Defines the hierarchical level of an element within a structure.\", \"name\": \"aria-level\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-live\": { \"defaultValue\": null, \"description\": \"Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\", \"name\": \"aria-live\", \"required\": false, \"type\": { \"name\": \"\\\"off\\\" | \\\"assertive\\\" | \\\"polite\\\"\" } }, \"aria-modal\": { \"defaultValue\": null, \"description\": \"Indicates whether an element is modal when displayed.\", \"name\": \"aria-modal\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiline\": { \"defaultValue\": null, \"description\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\", \"name\": \"aria-multiline\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-multiselectable\": { \"defaultValue\": null, \"description\": \"Indicates that the user may select more than one item from the current selectable descendants.\", \"name\": \"aria-multiselectable\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-orientation\": { \"defaultValue\": null, \"description\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\", \"name\": \"aria-orientation\", \"required\": false, \"type\": { \"name\": \"\\\"horizontal\\\" | \\\"vertical\\\"\" } }, \"aria-owns\": { \"defaultValue\": null, \"description\": \"Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\\n@see aria-controls.\", \"name\": \"aria-owns\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-placeholder\": { \"defaultValue\": null, \"description\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\\nA hint could be a sample value or a brief description of the expected format.\", \"name\": \"aria-placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-posinset\": { \"defaultValue\": null, \"description\": \"Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-setsize.\", \"name\": \"aria-posinset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-pressed\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"pressed\\\" state of toggle buttons.\\n@see aria-checked\\n@see aria-selected.\", \"name\": \"aria-pressed\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\" | \\\"mixed\\\"\" } }, \"aria-readonly\": { \"defaultValue\": null, \"description\": \"Indicates that the element is not editable, but is otherwise operable.\\n@see aria-disabled.\", \"name\": \"aria-readonly\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-relevant\": { \"defaultValue\": null, \"description\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\\n@see aria-atomic.\", \"name\": \"aria-relevant\", \"required\": false, \"type\": { \"name\": \"\\\"additions\\\" | \\\"additions text\\\" | \\\"all\\\" | \\\"removals\\\" | \\\"text\\\"\" } }, \"aria-required\": { \"defaultValue\": null, \"description\": \"Indicates that user input is required on the element before a form may be submitted.\", \"name\": \"aria-required\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-roledescription\": { \"defaultValue\": null, \"description\": \"Defines a human-readable, author-localized description for the role of an element.\", \"name\": \"aria-roledescription\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"aria-rowcount\": { \"defaultValue\": null, \"description\": \"Defines the total number of rows in a table, grid, or treegrid.\\n@see aria-rowindex.\", \"name\": \"aria-rowcount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowindex\": { \"defaultValue\": null, \"description\": \"Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\\n@see aria-rowcount\\n@see aria-rowspan.\", \"name\": \"aria-rowindex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-rowspan\": { \"defaultValue\": null, \"description\": \"Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\\n@see aria-rowindex\\n@see aria-colspan.\", \"name\": \"aria-rowspan\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-selected\": { \"defaultValue\": null, \"description\": \"Indicates the current \\\"selected\\\" state of various widgets.\\n@see aria-checked\\n@see aria-pressed.\", \"name\": \"aria-selected\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"false\\\" | \\\"true\\\"\" } }, \"aria-setsize\": { \"defaultValue\": null, \"description\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\\n@see aria-posinset.\", \"name\": \"aria-setsize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-sort\": { \"defaultValue\": null, \"description\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\", \"name\": \"aria-sort\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"ascending\\\" | \\\"descending\\\" | \\\"other\\\"\" } }, \"aria-valuemax\": { \"defaultValue\": null, \"description\": \"Defines the maximum allowed value for a range widget.\", \"name\": \"aria-valuemax\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuemin\": { \"defaultValue\": null, \"description\": \"Defines the minimum allowed value for a range widget.\", \"name\": \"aria-valuemin\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuenow\": { \"defaultValue\": null, \"description\": \"Defines the current value for a range widget.\\n@see aria-valuetext.\", \"name\": \"aria-valuenow\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"aria-valuetext\": { \"defaultValue\": null, \"description\": \"Defines the human readable text alternative of aria-valuenow for a range widget.\", \"name\": \"aria-valuetext\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"classes\": { \"defaultValue\": null, \"description\": \"Override or extend the styles applied to the component.\", \"name\": \"classes\", \"required\": false, \"type\": { \"name\": \"Partial<Record<SvgIconClassKey, string>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/icons/index.tsx#SettingsIcon\"] = { docgenInfo: SettingsIcon.__docgenInfo, name: \"SettingsIcon\", path: \"atoms/icons/index.tsx#SettingsIcon\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { storiesOf } from '../../storybook'\nimport * as React from 'react'\nimport { AsyncSelect } from './'\nimport { number } from '@connexta/ace/@storybook/addon-knobs'\nimport { action } from '@connexta/ace/@storybook/addon-actions'\n\nconst stories = storiesOf('Components | Input', module)\n\nstories.add('Async Select', () => {\n  const debounceInMsKnob = number('Debounce (ms)', 500)\n  const networkInMs = number('Network Time (ms)', 1000)\n\n  const loadOptions = (input: any, callback: any) => {\n    const suggestions = [\n      { label: 'Person 1', value: 'value 1' },\n      { label: 'Person 2', value: 'value 2' },\n      { label: 'Person 3', value: 'value 3' },\n      { label: 'Person 4', value: 'value 4' },\n    ]\n\n    new Promise(resolve => {\n      action('Making Network Request')()\n      setTimeout(() => {\n        action('Network Request Resolved with: ')(suggestions)\n        resolve(suggestions)\n      }, networkInMs)\n    }).then(result => callback(result))\n  }\n\n  return (\n    <div style={{ maxWidth: '30%' }}>\n      <AsyncSelect\n        label=\"Choose an option\"\n        debounce={debounceInMsKnob}\n        onInputChange={(value: any) => {\n          action('onInputChange')(value)\n        }}\n        onChange={(value: any) => {\n          action('onChange')(value)\n        }}\n        loadOptions={loadOptions}\n      />\n    </div>\n  )\n})\n","import * as React from 'react'\nimport clsx from 'clsx'\nimport CreateableSelect from 'react-select/creatable'\nimport AsyncCreateableSelect from 'react-select/async-creatable'\nimport AsyncSelect from 'react-select/async'\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport Chip from '@material-ui/core/Chip'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport { Props as CreatableProps } from 'react-select/src/Creatable'\nimport { AsyncProps } from 'react-select/src/Async'\nimport { Props as SelectProps } from 'react-select/src/Select'\nconst _ = require('lodash')\n\nexport type Option = {\n  label: string\n  value: any\n}\n\nexport type GroupOptions = {\n  label: string\n  options: Option[]\n}\n\nconst useStyles = makeStyles(theme => ({\n  input: {\n    display: 'flex',\n    padding: 0,\n    height: 'auto',\n  },\n  valueContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  chip: {\n    margin: theme.spacing(0.5, 0.25),\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === 'light'\n        ? theme.palette.grey[300]\n        : theme.palette.grey[700],\n      0.08\n    ),\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2),\n  },\n  singleValue: {\n    fontSize: 16,\n  },\n  placeholder: {\n    position: 'absolute',\n    left: 2,\n    bottom: 6,\n    fontSize: 16,\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n  },\n  divider: {\n    height: theme.spacing(2),\n  },\n}))\n\nfunction NoOptionsMessage(props: any) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.noOptionsMessage}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  )\n}\n\nfunction inputComponent({ inputRef, ...props }: any) {\n  return <div ref={inputRef} {...props} />\n}\n\nfunction Control(props: any) {\n  const {\n    children,\n    innerProps,\n    innerRef,\n    selectProps: { classes, TextFieldProps },\n  } = props\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputComponent,\n        inputProps: {\n          className: classes.input,\n          ref: innerRef,\n          children,\n          ...innerProps,\n        },\n      }}\n      {...TextFieldProps}\n    />\n  )\n}\n\nfunction Option(props: any) {\n  return (\n    <MenuItem\n      ref={props.innerRef}\n      selected={props.isFocused}\n      component=\"div\"\n      style={{\n        fontWeight: props.isSelected ? 500 : 400,\n      }}\n      {...props.innerProps}\n    >\n      {props.children}\n    </MenuItem>\n  )\n}\n\nfunction Placeholder(props: any) {\n  const { selectProps, innerProps = {}, children } = props\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={selectProps.classes.placeholder}\n      {...innerProps}\n    >\n      {children}\n    </Typography>\n  )\n}\n\nfunction SingleValue(props: any) {\n  return (\n    <Typography\n      className={props.selectProps.classes.singleValue}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  )\n}\n\nfunction ValueContainer(props: any) {\n  return (\n    <div className={props.selectProps.classes.valueContainer}>\n      {props.children}\n    </div>\n  )\n}\n\nfunction MultiValue(props: any) {\n  return (\n    <Chip\n      tabIndex={-1}\n      label={props.children}\n      className={clsx(props.selectProps.classes.chip, {\n        [props.selectProps.classes.chipFocused]: props.isFocused,\n      })}\n      onDelete={props.removeProps.onClick}\n      deleteIcon={<CancelIcon {...props.removeProps} />}\n    />\n  )\n}\n\nfunction Menu(props: any) {\n  return (\n    <Paper\n      square\n      className={props.selectProps.classes.paper}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Paper>\n  )\n}\n\nconst components = {\n  Control,\n  Menu,\n  MultiValue,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  ValueContainer,\n}\n\n/**\n * Very important note when using async options: Because `onInputChange` for some reason is an 'interceptor' rather than a handler that ignores\n * the callback's return value (https://github.com/JedWatson/react-select/issues/1760), if you inline the method like\n * <CreatableSelect onInputChange={(value) => handleValue(value)}\n * and handleValue is an asynchronous function, it will attempt to alter the input value with the return value of handleValue, which will\n * immediately be a promise, causing CreatableSelect to throw an error (in my case `str.replace is not a function`)\n *\n * TLDR: You must not use the shorthand arrow syntax to auto return.\n * <CreatableSelect onInputChange={(value) => {handleValue(value)}} would work without issues.\n */\nexport const WrappedCreatableSelect = (props: CreatableProps<any>) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const selectStyles = {\n    input: (base: any) => ({\n      ...base,\n      color: theme.palette.text.primary,\n      '& input': {\n        font: 'inherit',\n      },\n    }),\n  }\n  const { label, styles, ...baseProps } = props\n\n  return (\n    <CreateableSelect\n      components={components}\n      classes={classes}\n      styles={{\n        ...selectStyles,\n      }}\n      TextFieldProps={{\n        label,\n        InputLabelProps: {\n          htmlFor: 'react-select-multiple',\n          shrink: true,\n        },\n      }}\n      {...baseProps}\n    />\n  )\n}\n\ntype AsyncCreateableProps = {\n  /**\n   * Time in ms to debounce load options call.\n   */\n  debounce?: number\n} & CreatableProps<any> &\n  AsyncProps<any>\n\nexport const WrappedAsyncCreatableSelect = (props: AsyncCreateableProps) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const selectStyles = {\n    input: (base: any) => ({\n      ...base,\n      color: theme.palette.text.primary,\n      '& input': {\n        font: 'inherit',\n      },\n    }),\n  }\n  const { label, styles, loadOptions, debounce = 0, ...baseProps } = props\n\n  const debouncedLoadOptions = _.debounce(loadOptions, debounce)\n\n  return (\n    <AsyncCreateableSelect\n      loadOptions={debouncedLoadOptions}\n      components={components}\n      classes={classes}\n      styles={{\n        ...selectStyles,\n      }}\n      TextFieldProps={{\n        label,\n        InputLabelProps: {\n          htmlFor: 'react-select-multiple',\n          shrink: true,\n        },\n      }}\n      {...baseProps}\n    />\n  )\n}\n\ntype AsyncSelectProps = {\n  /**\n   * Time in ms to debounce load options call.\n   */\n  debounce?: number\n} & SelectProps &\n  AsyncProps<any>\n\nexport const WrappedAsyncSelect = (props: AsyncSelectProps) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const selectStyles = {\n    input: (base: any) => ({\n      ...base,\n      color: theme.palette.text.primary,\n      '& input': {\n        font: 'inherit',\n      },\n    }),\n  }\n  const {\n    label,\n    styles,\n    debounce,\n    loadOptions,\n    components: customComponents,\n    ...baseProps\n  } = props\n\n  const debouncedLoadOptions = _.debounce(loadOptions, debounce)\n\n  return (\n    <AsyncSelect\n      loadOptions={debouncedLoadOptions}\n      components={{\n        ...components,\n        ...customComponents,\n      }}\n      classes={classes}\n      styles={{\n        ...selectStyles,\n      }}\n      TextFieldProps={{\n        label,\n        InputLabelProps: {\n          htmlFor: 'react-select',\n          shrink: true,\n        },\n      }}\n      {...baseProps}\n    />\n  )\n}\ntry {\n    // @ts-ignore\n    WrappedCreatableSelect.displayName = \"WrappedCreatableSelect\";\n    // @ts-ignore\n    WrappedCreatableSelect.__docgenInfo = { \"description\": \"Very important note when using async options: Because `onInputChange` for some reason is an 'interceptor' rather than a handler that ignores\\nthe callback's return value (https://github.com/JedWatson/react-select/issues/1760), if you inline the method like\\n<CreatableSelect onInputChange={(value) => handleValue(value)}\\nand handleValue is an asynchronous function, it will attempt to alter the input value with the return value of handleValue, which will\\nimmediately be a promise, causing CreatableSelect to throw an error (in my case `str.replace is not a function`)\\n\\nTLDR: You must not use the shorthand arrow syntax to auto return.\\n<CreatableSelect onInputChange={(value) => {handleValue(value)}} would work without issues.\", \"displayName\": \"WrappedCreatableSelect\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/input/autocomplete.tsx#WrappedCreatableSelect\"] = { docgenInfo: WrappedCreatableSelect.__docgenInfo, name: \"WrappedCreatableSelect\", path: \"atoms/input/autocomplete.tsx#WrappedCreatableSelect\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    WrappedAsyncCreatableSelect.displayName = \"WrappedAsyncCreatableSelect\";\n    // @ts-ignore\n    WrappedAsyncCreatableSelect.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedAsyncCreatableSelect\", \"props\": { \"debounce\": { \"defaultValue\": null, \"description\": \"Time in ms to debounce load options call.\", \"name\": \"debounce\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/input/autocomplete.tsx#WrappedAsyncCreatableSelect\"] = { docgenInfo: WrappedAsyncCreatableSelect.__docgenInfo, name: \"WrappedAsyncCreatableSelect\", path: \"atoms/input/autocomplete.tsx#WrappedAsyncCreatableSelect\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    WrappedAsyncSelect.displayName = \"WrappedAsyncSelect\";\n    // @ts-ignore\n    WrappedAsyncSelect.__docgenInfo = { \"description\": \"\", \"displayName\": \"WrappedAsyncSelect\", \"props\": { \"debounce\": { \"defaultValue\": null, \"description\": \"Time in ms to debounce load options call.\", \"name\": \"debounce\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/input/autocomplete.tsx#WrappedAsyncSelect\"] = { docgenInfo: WrappedAsyncSelect.__docgenInfo, name: \"WrappedAsyncSelect\", path: \"atoms/input/autocomplete.tsx#WrappedAsyncSelect\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react'\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox'\nimport styled from 'styled-components'\n\nexport const WrappedCheckbox = styled(\n  React.forwardRef((props: CheckboxProps, ref: React.Ref<any>) => {\n    return <Checkbox {...props} ref={ref} />\n  })\n)<CheckboxProps>`` as React.ComponentType<CheckboxProps>\n","import * as React from 'react'\nimport FormControl, { FormControlProps } from '@material-ui/core/FormControl'\nimport FormControlLabel, {\n  FormControlLabelProps,\n} from '@material-ui/core/FormControlLabel'\nimport FormGroup, { FormGroupProps } from '@material-ui/core/FormGroup'\nimport FormHelperText, {\n  FormHelperTextProps,\n} from '@material-ui/core/FormHelperText'\nimport FormLabel, { FormLabelProps } from '@material-ui/core/FormLabel'\n\nimport styled from 'styled-components'\n\nexport const WrappedFormControl = styled(\n  React.forwardRef((props: FormControlProps, ref: React.Ref<any>) => {\n    return <FormControl {...props} ref={ref} />\n  })\n)<FormControlProps>`` as React.ComponentType<FormControlProps>\n\nexport const WrappedFormControlLabel = styled(\n  React.forwardRef((props: FormControlLabelProps, ref: React.Ref<any>) => {\n    return <FormControlLabel {...props} ref={ref} />\n  })\n)<FormControlLabelProps>`` as React.ComponentType<FormControlLabelProps>\n\nexport const WrappedFormGroup = styled(\n  React.forwardRef((props: FormGroupProps, ref: React.Ref<any>) => {\n    return <FormGroup {...props} ref={ref} />\n  })\n)<FormGroupProps>`` as React.ComponentType<FormGroupProps>\n\nexport const WrappedFormHelperText = styled(\n  React.forwardRef((props: FormHelperTextProps, ref: React.Ref<any>) => {\n    return <FormHelperText {...props} ref={ref} />\n  })\n)<FormHelperTextProps>`` as React.ComponentType<FormHelperTextProps>\n\nexport const WrappedFormLabel = styled(\n  React.forwardRef((props: FormLabelProps, ref: React.Ref<any>) => {\n    return <FormLabel {...props} ref={ref} />\n  })\n)<FormLabelProps>`` as React.ComponentType<FormLabelProps>\n","export { WrappedTextField as TextField } from './text'\nexport {\n  WrappedSelect as Select,\n  WrappedMenuItem as MenuItem,\n  OutlinedSelect,\n} from './select'\nexport { WrappedInputLabel as InputLabel } from './label'\nexport { WrappedOutlinedInput as OutlinedInput } from './input'\nexport { WrappedInputBase as InputBase } from './input-base'\nexport {\n  WrappedFormControl as FormControl,\n  WrappedFormControlLabel as FormControlLabel,\n  WrappedFormGroup as FormGroup,\n  WrappedFormHelperText as FormHelperText,\n  WrappedFormLabel as FormLabel,\n} from './form-control'\nexport { WrappedRadioGroup as RadioGroup, WrappedRadio as Radio } from './radio'\nexport { WrappedCheckbox as Checkbox } from './checkbox'\nexport {\n  WrappedCreatableSelect as CreatableSelect,\n  WrappedAsyncCreatableSelect as AsyncCreatableSelect,\n  WrappedAsyncSelect as AsyncSelect,\n} from './autocomplete'\n","import * as React from 'react'\nimport InputBase, { InputBaseProps } from '@material-ui/core/InputBase'\nimport styled from 'styled-components'\n\nexport const WrappedInputBase = styled(\n  React.forwardRef((props: InputBaseProps, ref: React.Ref<any>) => {\n    return <InputBase {...props} ref={ref} />\n  })\n)<InputBaseProps>`` as React.ComponentType<InputBaseProps>\n","import { storiesOf } from '../../storybook'\nimport * as React from 'react'\nimport { CreatableSelect, AsyncCreatableSelect } from './'\nimport { GroupOptions } from './autocomplete'\nimport { number } from '@connexta/ace/@storybook/addon-knobs'\nimport { action } from '@connexta/ace/@storybook/addon-actions'\n\nconst stories = storiesOf('Components | Input', module)\n\nstories.add('AutoComplete', () => {\n  const [selectValues, setSelectValues] = React.useState([])\n  const [suggestions, setSuggestions] = React.useState<GroupOptions[]>([])\n\n  return (\n    <div style={{ maxWidth: '30%' }}>\n      <CreatableSelect\n        isMulti\n        value={selectValues}\n        onChange={(values: any) => setSelectValues(values)}\n        onInputChange={() => {\n          setSuggestions([\n            {\n              label: 'Group 1',\n              options: [{ label: 'Person 1', value: 'value 1' }],\n            },\n            {\n              label: 'Group 2',\n              options: [{ label: 'Person 2', value: 'value 2' }],\n            },\n          ])\n        }}\n        options={suggestions}\n      />\n    </div>\n  )\n})\n\nstories.add('AutoComplete (Async)', () => {\n  const [selectValues, setSelectValues] = React.useState([])\n\n  const debounceInMsKnob = number('Debounce (ms)', 500)\n  const networkInMs = number('Network Time (ms)', 1000)\n\n  const getOptions = (input: any, callback: any) => {\n    const suggestions = [\n      {\n        label: 'Group 1',\n        options: [{ label: 'Person 1', value: 'value 1' }],\n      },\n      {\n        label: 'Group 2',\n        options: [{ label: 'Person 2', value: 'value 2' }],\n      },\n      {\n        label: 'Group 3',\n        options: [{ label: 'Person 2', value: 'value 2' }],\n      },\n    ]\n\n    new Promise(resolve => {\n      action('Making Network Request')()\n      setTimeout(() => {\n        action('Network Request Resolved with: ')(suggestions)\n        resolve(suggestions)\n      }, networkInMs)\n    }).then(result => callback(result))\n  }\n\n  return (\n    <div style={{ maxWidth: '30%' }}>\n      <AsyncCreatableSelect\n        isMulti\n        value={selectValues}\n        onChange={(values: any) => setSelectValues(values)}\n        loadOptions={getOptions}\n        debounce={debounceInMsKnob}\n      />\n    </div>\n  )\n})\n","import * as React from 'react'\nimport OutlinedInput, {\n  OutlinedInputProps,\n} from '@material-ui/core/OutlinedInput'\nimport styled from 'styled-components'\n\nexport const WrappedOutlinedInput = styled(\n  React.forwardRef((props: OutlinedInputProps, ref: React.Ref<any>) => {\n    return <OutlinedInput {...props} ref={ref} />\n  })\n)<OutlinedInputProps>`` as React.ComponentType<OutlinedInputProps>\n","import * as React from 'react'\nimport InputLabel, { InputLabelProps } from '@material-ui/core/InputLabel'\nimport styled from 'styled-components'\n\nexport const WrappedInputLabel = styled(\n  React.forwardRef((props: InputLabelProps, ref: React.Ref<any>) => {\n    return <InputLabel {...props} ref={ref} />\n  })\n)<InputLabelProps>`` as React.ComponentType<InputLabelProps>\n","import * as React from 'react'\nimport Radio, { RadioProps } from '@material-ui/core/Radio'\nimport RadioGroup, { RadioGroupProps } from '@material-ui/core/RadioGroup'\nimport styled from 'styled-components'\n\nexport const WrappedRadio = styled(\n  React.forwardRef((props: RadioProps, ref: React.Ref<any>) => {\n    return <Radio {...props} ref={ref} />\n  })\n)<RadioProps>`` as React.ComponentType<RadioProps>\n\nexport const WrappedRadioGroup = styled(\n  React.forwardRef((props: RadioGroupProps, ref: React.Ref<any>) => {\n    return <RadioGroup {...props} ref={ref} />\n  })\n)<RadioGroupProps>`` as React.ComponentType<RadioGroupProps>\n","import { select } from '@connexta/ace/@storybook/addon-knobs'\nimport { storiesOf } from '../../storybook'\nimport * as React from 'react'\nimport { FormControl, MenuItem, OutlinedSelect } from './'\n\nconst stories = storiesOf('Components | Select', module)\n\nstories.add('OutlinedSelect', () => {\n  const [value, setValue] = React.useState()\n\n  const margin = select(\n    'Margin',\n    {\n      Normal: 'normal',\n      Dense: 'dense',\n      None: 'none',\n    },\n    'outlined'\n  ) as 'normal' | 'dense' | 'none'\n\n  return (\n    <FormControl\n      variant=\"outlined\"\n      margin={margin}\n      style={{ minWidth: '100px' }}\n    >\n      <OutlinedSelect\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        label=\"Select\"\n      >\n        <MenuItem value={''}>Reset</MenuItem>\n        <MenuItem value={'1'}>Choice 1</MenuItem>\n        <MenuItem value={'2'}>Choice 2</MenuItem>\n      </OutlinedSelect>\n    </FormControl>\n  )\n})\n","import * as React from 'react'\nimport Select, { SelectProps } from '@material-ui/core/Select'\nimport MenuItem, { MenuItemProps } from '@material-ui/core/MenuItem'\nimport styled from 'styled-components'\nimport { OutlinedInput, InputLabel } from './'\n\nexport const WrappedSelect = styled(\n  React.forwardRef((props: SelectProps, ref: React.Ref<any>) => {\n    return <Select {...props} ref={ref} />\n  })\n)<SelectProps>`` as React.ComponentType<SelectProps>\n\nexport const WrappedMenuItem = styled(\n  React.forwardRef((props: MenuItemProps, ref: React.Ref<any>) => {\n    //@ts-ignore\n    return <MenuItem {...props} ref={ref} />\n  })\n)<MenuItemProps>`` as React.ComponentType<MenuItemProps>\n\nexport const OutlinedSelect = styled(\n  React.forwardRef(\n    (props: SelectProps & { label: string }, ref: React.Ref<any>) => {\n      const inputLabelRef = React.useRef<any>(null)\n      const [labelWidth, setLabelWidth] = React.useState(0)\n\n      React.useEffect(() => {\n        setLabelWidth(inputLabelRef.current!.offsetWidth)\n      }, [])\n\n      return (\n        <>\n          <InputLabel ref={inputLabelRef}>{props.label}</InputLabel>\n          <Select\n            {...props}\n            input={<OutlinedInput labelWidth={labelWidth} />}\n            ref={ref}\n          >\n            {props.children}\n          </Select>\n        </>\n      )\n    }\n  )\n)<SelectProps & { label: string }>`` as React.ComponentType<\n  SelectProps & { label: string }\n>\n","import * as React from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport styled from 'styled-components'\n\nexport const WrappedTextField = styled(\n  React.forwardRef((props: TextFieldProps, ref: React.Ref<any>) => {\n    return <TextField {...props} ref={ref} />\n  })\n)<TextFieldProps>`` as React.ComponentType<TextFieldProps>\n","export { WrappedModal as Modal, ControlledModal, ModalHeader } from './modal'\n","import * as React from 'react'\nimport { storiesOf } from '../../storybook'\nimport { ControlledModal, ModalHeader } from './'\nimport { Button } from '../button'\n\nconst stories = storiesOf('Components | Modal', module)\n\nstories.add('Single Modal', () => {\n  return (\n    <ControlledModal\n      modalChildren={childrenProps => {\n        return (\n          <>\n            <ModalHeader>{'Modal Header'}</ModalHeader>\n            <div>Modal Content</div>\n            <Button onClick={() => childrenProps.setOpen(false)}>\n              Close Modal\n            </Button>\n          </>\n        )\n      }}\n    >\n      {renderProps => {\n        return (\n          <Button onClick={() => renderProps.setOpen(true)}>Open Modal</Button>\n        )\n      }}\n    </ControlledModal>\n  )\n})\n\nstories.add('Two Modals', () => {\n  return (\n    <ControlledModal\n      modalChildren={modalOneChildrenProps => {\n        return (\n          <>\n            <ModalHeader>{'Modal One Header'}</ModalHeader>\n            <div>Modal One Content</div>\n            <Button onClick={() => modalOneChildrenProps.setOpen(false)}>\n              Close Modal\n            </Button>\n          </>\n        )\n      }}\n    >\n      {topModalRenderProps => {\n        return (\n          <>\n            <ControlledModal\n              modalChildren={modalTwoChildrenProps => {\n                return (\n                  <>\n                    <ModalHeader>{'Modal Two Header'}</ModalHeader>\n                    <div>Modal Two Content</div>\n                    <Button\n                      onClick={() => modalTwoChildrenProps.setOpen(false)}\n                    >\n                      Close Modal\n                    </Button>\n                  </>\n                )\n              }}\n            >\n              {bottomModalRenderProps => {\n                return (\n                  <>\n                    <Button onClick={() => topModalRenderProps.setOpen(true)}>\n                      Open Modal One\n                    </Button>\n                    <Button\n                      onClick={() => bottomModalRenderProps.setOpen(true)}\n                    >\n                      Open Modal Two\n                    </Button>\n                  </>\n                )\n              }}\n            </ControlledModal>\n          </>\n        )\n      }}\n    </ControlledModal>\n  )\n})\n","import * as React from 'react'\nimport Modal, { ModalProps } from '@material-ui/core/Modal'\nimport { Paper } from '../paper'\nimport { Typography } from '../typography'\nimport { Divider } from '../divider'\nimport { Button } from '../button'\nimport { CloseIcon } from '../icons'\nimport { Grid } from '../grid'\nimport styled from 'styled-components'\nimport { Subtract } from '../../typescript'\nimport { PaperProps } from '@material-ui/core/Paper'\n\nexport const WrappedModal = styled(\n  React.forwardRef((props: ModalProps, ref: React.Ref<any>) => {\n    return <Modal {...props} ref={ref} />\n  })\n)<ModalProps>`` as React.ComponentType<ModalProps>\n\nconst CustomPaper = styled(Paper)<{ width?: string }>`\n  min-width: 20vw;\n  margin: 100px auto auto auto;\n  padding: 10px;\n  max-height: calc(100% - 200px);\n  overflow: auto;\n  position: relative;\n  max-width: ${({ width }) => (width ? width : '70vw')};\n` as React.ComponentType<PaperProps & { width?: string }>\n\nconst HeaderTitle = styled(Typography)`\n  flex-grow: 1;\n`\n\nconst ModalContext = React.createContext({\n  setOpen: () => {},\n  onClose: () => {},\n} as {\n  setOpen: setType<boolean>\n  onClose: (event: {}, reason: 'backdropClick' | 'escapeKeyDown') => void\n})\n\nexport const ModalHeader = ({ children }: { children?: React.ReactNode }) => {\n  const modalContext = React.useContext(ModalContext)\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"center\"\n        wrap=\"nowrap\"\n        style={{\n          padding: '10px 0px',\n        }}\n      >\n        <Grid item>\n          <Button\n            onClick={() => {\n              modalContext.onClose({}, 'escapeKeyDown')\n            }}\n            style={{ visibility: 'hidden' }}\n          >\n            <CloseIcon />\n          </Button>\n        </Grid>\n        <Grid item style={{ width: '100%' }}>\n          <HeaderTitle variant=\"h5\" align=\"center\">\n            {children}\n          </HeaderTitle>\n        </Grid>\n        <Grid item>\n          <Button\n            onClick={() => {\n              modalContext.onClose({}, 'escapeKeyDown')\n            }}\n          >\n            <CloseIcon />\n          </Button>\n        </Grid>\n      </Grid>\n      <Divider style={{ margin: '0px -10px 20px -10px' }} />\n    </>\n  )\n}\n\ntype setType<T> = React.Dispatch<React.SetStateAction<T>>\ntype Props = {\n  /**\n   * CSS Width to use for the modal. i.e. 100%, 10px, 40vw\n   */\n  width?: string\n  children: ({ setOpen }: { setOpen: setType<boolean> }) => React.ReactElement\n  modalChildren: (\n    {\n      setOpen,\n    }: {\n      setOpen: setType<boolean>\n    }\n  ) => React.ReactElement\n  defaultOpen?: boolean\n  modalProps?: Subtract<\n    ModalProps,\n    {\n      open: any\n      children: any\n    }\n  >\n  paperProps?: PaperProps\n}\n\nexport const ControlledModal = ({\n  children,\n  modalChildren,\n  width,\n  defaultOpen = false,\n  modalProps,\n  paperProps,\n}: Props) => {\n  const [open, setOpen] = React.useState(defaultOpen)\n  const onClose =\n    modalProps && modalProps.onClose ? modalProps.onClose : () => setOpen(false)\n  return (\n    <>\n      {children({ setOpen })}\n      <ModalContext.Provider\n        value={{\n          setOpen,\n          onClose,\n        }}\n      >\n        <Modal open={open} onClose={onClose} {...modalProps}>\n          <>\n            <CustomPaper width={width} {...paperProps}>\n              {modalChildren({ setOpen })}\n            </CustomPaper>\n          </>\n        </Modal>\n      </ModalContext.Provider>\n    </>\n  )\n}\ntry {\n    // @ts-ignore\n    ModalHeader.displayName = \"ModalHeader\";\n    // @ts-ignore\n    ModalHeader.__docgenInfo = { \"description\": \"\", \"displayName\": \"ModalHeader\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/modal/modal.tsx#ModalHeader\"] = { docgenInfo: ModalHeader.__docgenInfo, name: \"ModalHeader\", path: \"atoms/modal/modal.tsx#ModalHeader\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ControlledModal.displayName = \"ControlledModal\";\n    // @ts-ignore\n    ControlledModal.__docgenInfo = { \"description\": \"\", \"displayName\": \"ControlledModal\", \"props\": { \"width\": { \"defaultValue\": null, \"description\": \"CSS Width to use for the modal. i.e. 100%, 10px, 40vw\", \"name\": \"width\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/modal/modal.tsx#ControlledModal\"] = { docgenInfo: ControlledModal.__docgenInfo, name: \"ControlledModal\", path: \"atoms/modal/modal.tsx#ControlledModal\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { WrappedPaper as Paper } from './paper'\n","import * as React from 'react'\nimport Paper, { PaperProps } from '@material-ui/core/Paper'\nimport styled from 'styled-components'\n\nexport const WrappedPaper = styled(\n  React.forwardRef((props: PaperProps, ref: React.Ref<any>) => {\n    return <Paper {...props} ref={ref} />\n  })\n)<PaperProps>`` as React.ComponentType<PaperProps>\n","export {\n  WrappedKeyboardDateTimePicker as KeyboardDateTimePicker,\n} from './keyboard-date-time-picker'\n","import { select, text } from '@connexta/ace/@storybook/addon-knobs'\nimport { storiesOf } from '../../storybook'\nimport * as React from 'react'\nimport { KeyboardDateTimePicker } from './'\n\nconst stories = storiesOf('Components | Date Time', module)\n\nstories.add('KeyboardDateTimePicker', () => {\n  const [value, setValue] = React.useState<Date | null>(null)\n\n  const variant = select(\n    'Variant',\n    {\n      Dialog: 'dialog',\n      Inline: 'inline',\n      Static: 'static',\n    },\n    'dialog'\n  ) as 'dialog' | 'inline' | 'static'\n\n  const inputVariant = select(\n    'Input Variant',\n    {\n      Outlined: 'outlined',\n      Standard: 'standard',\n      Filled: 'filled',\n    },\n    'outlined'\n  ) as 'outlined' | 'standard' | 'filled'\n\n  const margin = select(\n    'Margin',\n    {\n      Normal: 'normal',\n      Dense: 'dense',\n      None: 'none',\n    },\n    'outlined'\n  ) as 'normal' | 'dense' | 'none'\n\n  const format = text('Date Format', 'DD MMMM YYYY h:mm a Z')\n\n  return (\n    <KeyboardDateTimePicker\n      style={{ width: '400px' }}\n      variant={variant}\n      inputVariant={inputVariant}\n      margin={margin}\n      format={format}\n      label=\"Choose Date\"\n      onChange={(v: any) => setValue(v)}\n      value={value}\n    />\n  )\n})\n","import * as React from 'react'\nimport {\n  KeyboardDateTimePicker,\n  KeyboardDateTimePickerProps,\n} from '@material-ui/pickers'\nimport styled from 'styled-components'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\n\nconst _KeyboardDateTimePicker = styled(KeyboardDateTimePicker)`\n  .MuiInputBase-adornedEnd {\n    padding-right: 0px;\n  }\n`\n\nexport const WrappedKeyboardDateTimePicker = styled(\n  React.forwardRef(\n    (props: KeyboardDateTimePickerProps, ref: React.Ref<any>) => {\n      return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <_KeyboardDateTimePicker {...props} ref={ref} />\n        </MuiPickersUtilsProvider>\n      )\n    }\n  )\n)<KeyboardDateTimePickerProps>`` as React.ComponentType<\n  KeyboardDateTimePickerProps\n>\n","import * as React from 'react'\nimport CircularProgress, {\n  CircularProgressProps,\n} from '@material-ui/core/CircularProgress'\nimport styled from 'styled-components'\n\nexport const WrappedCircularProgress = styled(\n  React.forwardRef((props: CircularProgressProps, ref: React.Ref<any>) => {\n    return <CircularProgress {...props} ref={ref} />\n  })\n)<CircularProgressProps>`` as React.ComponentType<CircularProgressProps>\n","export { WrappedLinearProgress as LinearProgress } from './linear'\nexport { WrappedCircularProgress as CircularProgress } from './circular'\n","import * as React from 'react'\nimport LinearProgress, {\n  LinearProgressProps,\n} from '@material-ui/core/LinearProgress'\nimport styled from 'styled-components'\n\nexport const WrappedLinearProgress = styled(\n  React.forwardRef((props: LinearProgressProps, ref: React.Ref<any>) => {\n    return <LinearProgress {...props} ref={ref} />\n  })\n)<LinearProgressProps>`` as React.ComponentType<LinearProgressProps>\n","import * as React from 'react'\nimport { storiesOf } from '../../storybook'\nimport { CircularProgress, LinearProgress } from './'\nimport { select, number } from '@connexta/ace/@storybook/addon-knobs'\n\nconst stories = storiesOf('Components | Progress', module)\n\nstories.add('Circular Progress', () => {\n  const color = select(\n    'Color',\n    {\n      Inherit: 'inherit',\n      Primary: 'primary',\n      Secondary: 'secondary',\n    },\n    'default'\n  ) as 'inherit' | 'primary' | 'secondary'\n\n  const variant = select(\n    'Variant',\n    {\n      Indeterminate: 'indeterminate',\n      Determinate: 'determinate',\n      Static: 'static',\n    },\n    'indeterminate'\n  ) as 'indeterminate' | 'determinate' | 'static'\n\n  const size = number('Size', 100)\n  const value = number('Value', 50)\n  const thickness = number('Thickness', 2)\n\n  return (\n    <CircularProgress\n      variant={variant}\n      color={color}\n      size={size}\n      value={value}\n      thickness={thickness}\n    />\n  )\n})\n\nstories.add('Linear Progress', () => {\n  return <LinearProgress />\n})\n","export {\n  WrappedSnackbar as Snackbar,\n  WrappedSnackbarContent as SnackbarContent,\n} from './snackbar'\nexport {\n  SnackbarProvider,\n  withSnackbar,\n  useSnackbar,\n  generateDismissSnackbarAction,\n} from './snackbar.provider'\n","import * as React from 'react'\nimport {\n  SnackbarProvider as Provider,\n  withSnackbar as withSnackbarShadow,\n  useSnackbar as useSnackbarShadow,\n  WithSnackbarProps,\n} from 'notistack'\nimport { Button } from '../button'\nimport { CloseIcon } from '../icons'\n\nexport const SnackbarProvider = Provider\nexport const withSnackbar = withSnackbarShadow\nexport const useSnackbar = useSnackbarShadow\n\nexport const generateDismissSnackbarAction = ({\n  closeSnackbar,\n}: {\n  closeSnackbar: WithSnackbarProps['closeSnackbar']\n}) => {\n  return (key: string) => {\n    return (\n      <Button\n        variant=\"text\"\n        color=\"inherit\"\n        onClick={() => {\n          closeSnackbar(key)\n        }}\n      >\n        <CloseIcon />\n      </Button>\n    )\n  }\n}\ntry {\n    // @ts-ignore\n    withSnackbar.displayName = \"withSnackbar\";\n    // @ts-ignore\n    withSnackbar.__docgenInfo = { \"description\": \"\", \"displayName\": \"withSnackbar\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/snackbar/snackbar.provider.tsx#withSnackbar\"] = { docgenInfo: withSnackbar.__docgenInfo, name: \"withSnackbar\", path: \"atoms/snackbar/snackbar.provider.tsx#withSnackbar\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    generateDismissSnackbarAction.displayName = \"generateDismissSnackbarAction\";\n    // @ts-ignore\n    generateDismissSnackbarAction.__docgenInfo = { \"description\": \"\", \"displayName\": \"generateDismissSnackbarAction\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/snackbar/snackbar.provider.tsx#generateDismissSnackbarAction\"] = { docgenInfo: generateDismissSnackbarAction.__docgenInfo, name: \"generateDismissSnackbarAction\", path: \"atoms/snackbar/snackbar.provider.tsx#generateDismissSnackbarAction\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react'\nimport { storiesOf } from '../../storybook'\nimport { Snackbar, SnackbarContent } from './'\nimport { select } from '@connexta/ace/@storybook/addon-knobs'\nimport { Button } from '../button'\nimport { useState } from 'react'\nimport { Grid } from '../grid'\nimport { ErrorIcon, CloseIcon } from '../icons'\n\nconst stories = storiesOf('Components | Snackbar', module)\n\nstories.add('Default', () => {\n  const [message, setMessage] = useState<string | null>(null)\n\n  const variant = select(\n    'Variant',\n    {\n      Success: 'success',\n      Error: 'error',\n    },\n    'success'\n  ) as 'success' | 'error'\n\n  return (\n    <div>\n      <Button onClick={() => setMessage('Snackbar Message')} variant=\"outlined\">\n        Trigger Snackbar\n      </Button>\n      <Snackbar\n        open={message != null}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n      >\n        <SnackbarContent\n          variant={variant}\n          message={\n            <Grid container alignItems=\"center\">\n              {variant == 'error' && (\n                <ErrorIcon\n                  style={{\n                    marginRight: '10px',\n                  }}\n                />\n              )}\n              {message}\n            </Grid>\n          }\n          action={\n            <Button onClick={() => setMessage(null)} color=\"inherit\">\n              <CloseIcon />\n            </Button>\n          }\n        />\n      </Snackbar>\n    </div>\n  )\n})\n","import * as React from 'react'\nimport Snackbar, { SnackbarProps } from '@material-ui/core/Snackbar'\nimport SnackbarContent, {\n  SnackbarContentProps,\n} from '@material-ui/core/SnackbarContent'\nimport styled from 'styled-components'\nimport { useTheme } from '@material-ui/core/styles'\n\ntype ExtraProps = {\n  variant?: 'error' | 'success'\n}\n\nexport const WrappedSnackbar = styled(\n  React.forwardRef((props: SnackbarProps & ExtraProps, ref: React.Ref<any>) => {\n    return <Snackbar {...props} ref={ref} />\n  })\n)<SnackbarProps>`` as React.ComponentType<SnackbarProps>\n\nexport const WrappedSnackbarContent = styled(\n  React.forwardRef(\n    (props: SnackbarContentProps & ExtraProps, ref: React.Ref<any>) => {\n      const theme = useTheme()\n      const { variant = 'error', ...baseProps } = props\n      let style = {}\n      if (variant === 'error') {\n        style = {\n          background: theme.palette.error.dark,\n          color: theme.palette.error.contrastText,\n        }\n      } else if (variant === 'success') {\n        style = {\n          background: theme.palette.primary.dark,\n          color: theme.palette.primary.contrastText,\n        }\n      }\n      return <SnackbarContent {...baseProps} ref={ref} style={style} />\n    }\n  )\n)<SnackbarContentProps>`` as React.ComponentType<\n  SnackbarContentProps & ExtraProps\n>\n","export { Provider as ThemeProvider } from './provider'\n","import * as React from 'react'\nimport {\n  createMuiTheme,\n  MuiThemeProvider as ThemeProvider,\n  darken,\n  Theme as ThemeInterface,\n  createStyles,\n  lighten,\n} from '@material-ui/core/styles'\nimport { ThemeContext } from 'styled-components'\nimport { createGlobalStyle } from 'styled-components'\nimport { lighten as polishedLighten } from 'polished'\n\ntype Theme = {\n  primary: string\n  secondary?: string\n}\n\nconst dark: Theme = {\n  primary: '#69E1E8',\n}\n\nconst light: Theme = {\n  primary: '#3c6dd5',\n}\n\nconst GlobalStyles = createGlobalStyle<ThemeInterface>`\n      a {\n        color: ${props => props.palette.primary.dark};\n      }\n      .MuiToolbar-root a,\n      .MuiToolbar-root .MuiBreadcrumbs-separator {\n        color: ${props =>\n          props.palette.getContrastText(props.palette.primary.main)};\n      }\n      .MuiDrawer-root a {\n        color: ${props =>\n          props.palette.getContrastText(props.palette.background.paper)};\n      }\n      @media (min-width: 600px) {\n        .MuiListItemIcon-root {\n          margin-left: 8px;\n        }\n      }\n      .lm_header {\n        z-index: 0 !important;\n      }\n      [role=\"tooltip\"] {\n        z-index: 101 !important;\n        pointer-events: all !important;\n      }\n    `\n\nexport const Provider = ({ children }: { children: any }) => {\n  const styledTheme = React.useContext(ThemeContext)\n  const paperColor = polishedLighten(0.1, styledTheme.backgroundContent)\n  const theme = createMuiTheme({\n    palette: {\n      type: styledTheme.theme === 'dark' ? 'dark' : 'light',\n      primary: {\n        main: styledTheme.theme === 'dark' ? dark.primary : light.primary,\n      },\n      background: {\n        paper: paperColor,\n      },\n    },\n    typography: {\n      h6: {\n        fontSize: '1.2rem',\n      },\n      fontSize: 16,\n    },\n    overrides: {\n      MuiCardActionArea: createStyles({\n        root: {\n          height: 'auto',\n        },\n      }),\n      MuiCardHeader: createStyles({\n        content: {\n          minWidth: '0px',\n        },\n      }),\n      MuiTooltip: createStyles({\n        tooltip: {\n          fontSize: '1rem',\n        },\n      }),\n    },\n    zIndex: {\n      mobileStepper: 101,\n      appBar: 101,\n      drawer: 101,\n      modal: 101,\n      snackbar: 101,\n      tooltip: 101,\n    },\n  })\n  return (\n    <>\n      <GlobalStyles {...theme} />\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </>\n  )\n}\ntry {\n    // @ts-ignore\n    Provider.displayName = \"Provider\";\n    // @ts-ignore\n    Provider.__docgenInfo = { \"description\": \"\", \"displayName\": \"Provider\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/theme/provider.tsx#Provider\"] = { docgenInfo: Provider.__docgenInfo, name: \"Provider\", path: \"atoms/theme/provider.tsx#Provider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react'\nimport { storiesOf } from '@connexta/ace/@storybook/react'\nimport { withKnobs } from '@connexta/ace/@storybook/addon-knobs'\nimport Timeline, { Point } from './timeline-circles'\n\nconst randomDate = (start: Date, end: Date) =>\n  new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nconst createRandomData = (start: Date, sampleSize: number): Point[] => {\n  let samples = []\n  for (let i = 0; i < sampleSize; i++) {\n    const date = randomDate(start, new Date())\n    const id = uuidv4()\n    samples.push({\n      date,\n      data: {\n        id,\n        title: 'title - ' + id,\n      },\n      selected: false,\n      id: id,\n    })\n  }\n\n  return samples\n}\n\nconst createDuplicateData = (date: Date, sampleSize: number): Point[] => {\n  let samples = []\n  for (let i = 0; i < sampleSize; i++) {\n    const id = uuidv4()\n    samples.push({\n      date,\n      data: {\n        id,\n        title: 'title - ' + id,\n      },\n      selected: false,\n      id: id,\n    })\n  }\n\n  return samples\n}\n\ntype State = {\n  points: Point[]\n}\n\nclass TimelineExample extends React.Component<any, State> {\n  constructor(props: any) {\n    super(props)\n    const points = createRandomData(new Date(1990, 0, 1), 100).concat(\n      createDuplicateData(new Date(1980, 0, 1), 20)\n    )\n\n    this.state = {\n      points,\n    }\n  }\n\n  Tooltip = (points: Point[]) => {\n    return <pre>{JSON.stringify(points, null, 2)}</pre>\n  }\n\n  onClick = (toMatch: Point[]) => {\n    var newPoints = this.state.points.map(p => {\n      if (toMatch.some(match => match.id === p.id)) {\n        p.selected = !p.selected\n      }\n\n      return p\n    })\n\n    this.setState({ points: newPoints })\n    alert('ON CLICK: \\n' + JSON.stringify(toMatch))\n  }\n\n  render() {\n    return (\n      <Timeline\n        value={this.state.points}\n        onClick={this.onClick}\n        style={{\n          border: '1px solid grey',\n        }}\n        Tooltip={this.Tooltip}\n      >\n        Playground\n      </Timeline>\n    )\n  }\n}\nstoriesOf('Deprecated|Timeline (Circles)', module)\n  .addDecorator(withKnobs)\n  .add('playground', () => <TimelineExample />)\n","import * as React from 'react'\nimport * as d3 from 'd3'\nimport { Button } from '../button'\nimport styled from 'styled-components'\n\nconst clustering = require('density-clustering')\n\nexport type Point = {\n  id: string\n  date: Date\n  selected: boolean\n  data?: any\n}\n\ntype CoordinatePoint = {\n  cx: number\n  cy: number\n  point: Point\n}\n\ntype OnClick = (point: Point[]) => void\ntype OnHover = (points: Point[]) => any\n\ntype Props = {\n  className?: string\n  style?: {}\n  children?: any\n  value: Point[]\n  onClick?: OnClick\n  onHover?: OnHover\n  Tooltip?: any\n}\n\ntype DBSCAN = {\n  new (): DBSCAN\n  run: (dataset: number[][], radius: any, amount: any) => number[][]\n}\n\ntype clustering = {\n  DBSCAN: DBSCAN\n}\n\ntype ClusterPoint = {\n  cx: number\n  cy: number\n  radius: number\n  points: Point[]\n  selected: boolean\n}\n\nconst dbscan = new clustering.DBSCAN()\nconst POINT_RADIUS = 7\nconst CLUSTER_RADIUS = POINT_RADIUS * 2\nconst CLUSTER_NEIGHBOR_RADIUS = CLUSTER_RADIUS\nconst POINTS_TO_FORM_CLUSTER = 2\nconst Y_VALUE = 0\nconst SVG_HEIGHT = 300\n\nconst xAxisScale = (points: Point[]) => {\n  const dates = points.map(p => p.date.getTime())\n  const min = Math.min(...dates)\n  const max = Math.max(...dates)\n  const offset = (max - min) * 0.05\n  return {\n    min: new Date(min - offset),\n    max: new Date(max + offset),\n  }\n}\n\nconst Root = styled.div`\n  position: relative;\n`\n\nconst ZoomArea = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  button + button {\n    margin-left: 10px;\n  }\n`\n\nconst createClusterPoint = (points: any[]): ClusterPoint => {\n  const pointCxs: number[] = points.map(p => p.cx)\n  const max = Math.max(...pointCxs)\n  const min = Math.min(...pointCxs)\n  const radius = (max - min + 2 * POINT_RADIUS) / 2\n  const cx = min - POINT_RADIUS + radius\n\n  // All points are on the y axis, no need to take average\n  const cy = points[0].cy\n  return {\n    cx,\n    cy,\n    radius,\n    points: points.map(p => p.point),\n    selected: points.every(p => p.point.selected),\n  }\n}\n\nconst isPointInCluster = (clusters: ClusterPoint[], point: Point): boolean => {\n  return clusters.some(cluster => {\n    return cluster.points.map(p => p.id).indexOf(point.id) > -1\n  })\n}\n\n// const Circles = React.memo(({ points, onClick, onHover, margin }: any) => {\nconst Circles = ({ points, onClick, onHover, margin }: any) => {\n  // results are clusters of indices relating to array of coordiantes passed in\n  const clusters = dbscan.run(\n    points.map((p: any) => [p.cx, p.cy]),\n    CLUSTER_NEIGHBOR_RADIUS,\n    POINTS_TO_FORM_CLUSTER\n  ) as number[][]\n\n  const newClusterPoints = clusters\n    .filter(cluster => cluster.length > 1)\n    .map(cluster => cluster.map(i => points[i]))\n    .map(points => createClusterPoint(points))\n\n  const handleHover = (points: Point[]) => (e: any) => {\n    onHover({ x: e.pageX, y: e.pageY, points })\n  }\n  const transform = 'translate(' + -margin.left + ',0)'\n  const pointIdsInCluster: string[] = []\n\n  return (\n    <>\n      {newClusterPoints.map((cluster: ClusterPoint, i: number) => {\n        pointIdsInCluster.push(...cluster.points.map(p => p.id))\n        const rectX =\n          cluster.cx -\n          5 -\n          (cluster.points.length.toString().length / 2) * 10 +\n          'px'\n        const rectY = 30 + cluster.cy - 16 + 'px'\n        const rectWidth = cluster.points.length.toString().length * 10 + 10\n        const rectHeight = 20\n\n        const textX =\n          cluster.cx - (cluster.points.length.toString().length * 10) / 2 + 'px'\n        const textY = 30 + cluster.cy + 'px'\n\n        const selectedClusterProps = cluster.selected\n          ? {\n              stroke: 'black',\n              strokeWidth: '3px',\n              strokeOpacity: '100%',\n            }\n          : {}\n\n        const props = {\n          transform,\n          onMouseMove: handleHover(cluster.points),\n          onMouseOut: () => onHover([]),\n          onClick: () => onClick(cluster.points),\n        }\n\n        return (\n          <React.Fragment key={i}>\n            <circle\n              fill=\"grey\"\n              fillOpacity=\"0.25\"\n              cx={cluster.cx}\n              cy={cluster.cy}\n              r={cluster.radius}\n              {...props}\n              {...selectedClusterProps}\n            />\n            <rect\n              fill=\"black\"\n              x={rectX}\n              y={rectY}\n              width={rectWidth}\n              height={rectHeight}\n              {...props}\n            />\n            <rect\n              fill=\"black\"\n              x={cluster.cx - 1 + 'px'}\n              y={15 + cluster.cy - 16 + 'px'}\n              width={2}\n              height={15}\n              {...props}\n            />\n            <text fill=\"white\" x={textX} y={textY} fontSize=\"20\" {...props}>\n              {cluster.points.length}\n            </text>\n          </React.Fragment>\n        )\n      })}\n      {points.map((point: any, i: number) => {\n        var selectedClusters = newClusterPoints.filter(\n          cluster => cluster.selected\n        )\n        var selectedCircleProps = {}\n\n        if (\n          point.point.selected &&\n          !isPointInCluster(selectedClusters, point.point)\n        ) {\n          selectedCircleProps = {\n            stroke: 'black',\n            strokeWidth: '3px',\n            strokeOpacity: '100%',\n          }\n        }\n\n        return (\n          <circle\n            key={i}\n            fill=\"gray\"\n            fillOpacity=\"0.25\"\n            cx={point.cx}\n            cy={point.cy}\n            r={POINT_RADIUS}\n            transform={transform}\n            onMouseMove={handleHover([point.point])}\n            onMouseOut={() => onHover([])}\n            onClick={() => {\n              console.log(JSON.stringify(point.point))\n              onClick([point.point])\n            }}\n            {...selectedCircleProps}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nconst margin = { top: 20, right: 20, bottom: 30, left: 40 }\n\ntype TooltipState = {\n  x: number\n  y: number\n  points: Point[]\n}\n\ntype State = {\n  width: number\n  height: number\n  points: CoordinatePoint[]\n  tooltip: TooltipState | undefined\n  resizeToggle: boolean\n}\n\nclass Timeline extends React.Component<Props, State> {\n  d3Ref = React.createRef()\n  view: any = null\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      width: 0,\n      height: 0,\n      points: [],\n      tooltip: undefined,\n      resizeToggle: false,\n    }\n  }\n  onHover = (e: any) => {\n    const { x, y, points = [] } = e\n    if (points.length === 0) {\n      this.setState({ tooltip: undefined })\n    } else {\n      this.setState({ tooltip: { x, y, points } })\n    }\n  }\n\n  onZoom = () => {\n    const timelineContainer = d3.select('.timeline')\n    let t = d3.zoomTransform(timelineContainer.node() as any)\n\n    // TODO - No idea why k ends up being -1, this is a hacky fix :(\n    //0 means nothing will display, -1 inverts\n    if (t.k === -1) {\n      console.log('t.k was -1')\n      // @ts-ignore\n      t.k = 1\n    }\n\n    // @ts-ignore\n    const newXScale = t.rescaleX(this.x)\n    // @ts-ignore\n    const newYScale = t.rescaleY(this.y)\n    // @ts-ignore\n    const xAxis = d3.axisBottom(newXScale)\n    // @ts-ignore\n    const yAxis = d3.axisLeft(newYScale)\n\n    d3.select('.axis--x').call(xAxis.scale(newXScale))\n    d3.select('.axis--y').call(yAxis.scale(newYScale))\n\n    const points = this.props.value.map(point => {\n      const cx = newXScale(point.date)\n      const cy = newYScale(Y_VALUE)\n      return { cx, cy, point }\n    })\n\n    this.setState({ points })\n  }\n  zoomIn() {}\n  zoomOut() {}\n  initD3() {\n    if (this.d3Ref.current === null) {\n      return\n    }\n    const { width, height } = (this.d3Ref\n      .current as any).getBoundingClientRect()\n    this.setState({ width, height })\n\n    const x = d3.scaleTime().range([0, width])\n    const y = d3.scaleLinear().range([height, 0])\n\n    // @ts-ignore\n    this.x = x\n    // @ts-ignore\n    this.y = y\n\n    // setup axises\n    const range = xAxisScale(this.props.value)\n    const xAxisMin = range.min\n    const xAxisMax = range.max\n\n    x.domain([xAxisMin, xAxisMax])\n    y.domain([0, Y_VALUE])\n\n    const xAxis = d3.axisBottom(x)\n    const yAxis = d3.axisLeft(y)\n\n    d3.select('.axis--x').call(xAxis)\n    d3.select('.axis--y').call(yAxis)\n\n    const points = this.props.value.map(point => {\n      const cx = x(point.date)\n      const cy = y(Y_VALUE)\n      return { cx, cy, point }\n    })\n\n    this.setState({ points })\n\n    const zoomMin = 1\n    const zoomMax = (xAxisMax.getTime() - xAxisMin.getTime()) / (1000 * 60)\n\n    const zoom = d3\n      .zoom()\n      .scaleExtent([zoomMin, zoomMax])\n      .translateExtent([[0, 0], [width, height]])\n      .extent([[0, 0], [width, height]])\n      .on('zoom', this.onZoom)\n\n    const timelineContainer = d3.select('.timeline') as d3.Selection<\n      SVGSVGElement,\n      {},\n      HTMLElement,\n      any\n    >\n\n    // TODO: try and use onZoom here instead\n    this.zoomIn = () => {\n      zoom.scaleBy(timelineContainer.transition().duration(500), 2)\n    }\n\n    // TODO: try and use onZoom here instead\n    this.zoomOut = () => {\n      zoom.scaleBy(timelineContainer.transition().duration(500), 0.5)\n    }\n\n    d3.select('.timeline')\n      .call(zoom)\n      .transition()\n      .duration(1500)\n      .call(\n        zoom.transform as any,\n        d3.zoomIdentity\n          .scale(width / (x(xAxisMin) - x(xAxisMax)))\n          .translate(-x(xAxisMin), 0)\n      )\n  }\n\n  onResize = () => {\n    this.initD3()\n    this.setState({ resizeToggle: !this.state.resizeToggle })\n  }\n\n  componentDidMount() {\n    this.initD3()\n    window.addEventListener('resize', this.onResize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  render() {\n    const width = this.state.width - margin.left - margin.right\n    const height = SVG_HEIGHT - margin.top - margin.bottom\n    const { Tooltip = () => <div /> } = this.props\n\n    return (\n      <Root style={this.props.style} className={this.props.className}>\n        <ZoomArea>\n          <Button onClick={this.zoomIn} variant=\"outlined\">\n            +\n          </Button>\n          <Button onClick={this.zoomOut} variant=\"outlined\">\n            -\n          </Button>\n        </ZoomArea>\n        <div style={{ flexDirection: 'column' }}>\n          {(this as any).state.tooltip !== undefined ? (\n            <div\n              className=\"tooltip\"\n              style={{\n                fillOpacity: 0.9,\n                position: 'fixed',\n                left: (this as any).state.tooltip.x,\n                top: (this as any).state.tooltip.y + 50,\n                pointerEvents: 'none',\n              }}\n            >\n              <Tooltip\n                points={\n                  this.state.tooltip === undefined\n                    ? []\n                    : this.state.tooltip.points\n                }\n              />\n            </div>\n          ) : null}\n          <svg\n            ref={this.d3Ref as any}\n            className=\"timeline\"\n            height={SVG_HEIGHT}\n            style={{ width: '100%' }}\n          >\n            <defs>\n              <clipPath className=\"clip\">\n                <rect width={width} height={height} />\n              </clipPath>\n            </defs>\n            <g transform={'translate(' + margin.left + ',' + margin.top + ')'}>\n              <g clipPath=\"url(.clip)\">\n                <Circles\n                  points={this.state.points}\n                  margin={margin}\n                  onClick={this.props.onClick}\n                  onHover={this.onHover}\n                />\n              </g>\n              <g\n                className=\"axis--x\"\n                transform={'translate(0,' + height + ')'}\n              />\n              <g className=\"axis--y\" display=\"none\" />\n            </g>\n          </svg>\n        </div>\n      </Root>\n    )\n  }\n}\nexport default Timeline\ntry {\n    // @ts-ignore\n    Timeline.displayName = \"Timeline\";\n    // @ts-ignore\n    Timeline.__docgenInfo = { \"description\": \"\", \"displayName\": \"Timeline\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline-circles-deprecated/timeline-circles.tsx#Timeline\"] = { docgenInfo: Timeline.__docgenInfo, name: \"Timeline\", path: \"atoms/timeline-circles-deprecated/timeline-circles.tsx#Timeline\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { useState } from 'react'\nimport { Timescale } from './types'\n\nconst withinTimeScale = (newValues: Date[], timescale: Timescale) => {\n  const domain = timescale.domain()\n  if (newValues.length === 0) {\n    return true\n  } else if (newValues.length === 1) {\n    return domain[0] < newValues[0] && newValues[0] < domain[1]\n  } else if (newValues.length === 2) {\n    return domain[0] < newValues[0] && newValues[1] < domain[1]\n  } else {\n    console.debug('selectionRange can have a maximum of two elements.')\n    return false\n  }\n}\n\nexport const useSelectionRange = (\n  defaultValues: Date[],\n  timescale: Timescale\n): [Date[], (newValue: Date[]) => void] => {\n  const [values, setValues] = useState<Date[]>(defaultValues)\n  const setSelectionRange = (newValues: Date[]) => {\n    if (withinTimeScale(newValues, timescale)) {\n      setValues(newValues)\n    }\n  }\n\n  return [values, setSelectionRange]\n}\n","export { default } from './timeline'\n","import * as React from 'react'\nimport { useState } from 'react'\nimport { action } from '@connexta/ace/@storybook/addon-actions'\nimport { select, number, date } from '@connexta/ace/@storybook/addon-knobs'\nimport { storiesOf } from '../../storybook'\nimport Timeline from './index'\nimport styled from 'styled-components'\n\nimport { createTestData, formatDate } from './util'\nimport { TimelineItem } from './timeline'\n\nconst stories = storiesOf('Components|Timeline', module).addParameters({\n  info: `The TimelinePicker is a controlled component that can be used to select a time range. The TimelinePicker utilizies d3.js,\n  and supports zooming and dragging as well as translation between timezones.`,\n})\n\nconst ShowTimelineButton = styled.button`\n  background-color: ${({ theme }) => theme.primaryColor};\n  color: white;\n`\n\nconst renderDates = (dates: Date[], format: string, timezone: string) => {\n  if (dates.length == 0) {\n    return null\n  } else if (dates.length == 1) {\n    return formatDate(dates[0], format, timezone)\n  } else if (dates.length == 2) {\n    return `${formatDate(dates[0], format, timezone)} ---------- ${formatDate(\n      dates[1],\n      format,\n      timezone\n    )}`\n  }\n}\n\nstories.add('Timeline with Data', () => {\n  const numDataPoints = number('Number of spaced data points to render', 2000)\n  const testData = createTestData(numDataPoints)\n\n  const modeKnob = select(\n    'Initial Mode',\n    {\n      Selection: null,\n      Single: 'single',\n      Range: 'range',\n    },\n    null\n  )\n\n  const [mode, setMode] = useState<'single' | 'range' | undefined>(\n    modeKnob as any\n  )\n\n  const timezoneKnob = select(\n    'Timezone',\n    {\n      UTC: 'Etc/UTC',\n      '+7:00': 'Etc/GMT-7',\n      '-12:00': 'Etc/GMT+12',\n    },\n    'Etc/UTC'\n  )\n\n  const dateFormatKnob = select(\n    'Date Format',\n    {\n      ISO: 'YYYY-MM-DD[T]HH:mm:ss.SSSZ',\n      '24 Hour Standard': 'DD MMM YYYY HH:mm:ss.SSS Z',\n      '12 Hour Standard': 'DD MMM YYYY h:mm:ss.SSS a Z',\n    },\n    'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n  )\n\n  const minKnob = date('Minimum Date', new Date('1980-01-01:00:00.000z'))\n  const maxKnob = date('Maximum Date', new Date())\n\n  const [data, setData] = useState(testData)\n\n  return (\n    <Timeline\n      min={new Date(minKnob)}\n      max={new Date(maxKnob)}\n      height={300}\n      mode={mode}\n      format={dateFormatKnob}\n      timezone={timezoneKnob}\n      data={data}\n      dateAttributeAliases={{\n        created: 'Created',\n        modified: 'Modified',\n        published_date: 'Published',\n      }}\n      onCopy={(copiedValue: string) => action('clicked onCopy')(copiedValue)}\n      onSelect={(selectedData: TimelineItem[]) => {\n        action('onSelect')(selectedData)\n        const selectedIds = selectedData.map(d => d.id)\n        const newData = data.map(d => {\n          d.selected = selectedIds.indexOf(d.id) !== -1\n          return d\n        })\n        setData(newData)\n      }}\n      onDone={(selectionRange: Date[]) => {\n        action('clicked onDone')(selectionRange)\n        setMode(undefined)\n      }}\n    />\n  )\n})\n\nstories.add('Conditional Render', () => {\n  const numDataPoints = number('Number of spaced data points to render', 2000)\n  const testData = createTestData(numDataPoints)\n\n  const modeKnob = select(\n    'Initial Mode',\n    {\n      Single: 'single',\n      Range: 'range',\n    },\n    'single'\n  )\n\n  const [mode, setMode] = useState<'single' | 'range' | undefined>(\n    modeKnob as any\n  )\n\n  const [showTimeline, setShowTimeline] = useState(true)\n  const [timePicked, setTimePicked] = useState<Date[]>([])\n\n  const timezoneKnob = select(\n    'Timezone',\n    {\n      UTC: 'Etc/UTC',\n      '+5:00': 'Etc/GMT-5',\n      '+7:00': 'Etc/GMT-7',\n      '-7:00': 'Etc/GMT+7',\n      '-12:00': 'Etc/GMT+12',\n    },\n    'Etc/GMT+7'\n  )\n\n  const dateFormatKnob = select(\n    'Date Format',\n    {\n      ISO: 'YYYY-MM-DD[T]HH:mm:ss.SSSZ',\n      '24 Hour Standard': 'DD MMM YYYY HH:mm:ss.SSS Z',\n      '12 Hour Standard': 'DD MMM YYYY h:mm:ss.SSS a Z',\n    },\n    'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n  )\n\n  const minKnob = date('Minimum Date', new Date('1980-01-01:00:00.000z'))\n  const maxKnob = date('Maximum Date', new Date())\n\n  return (\n    <div>\n      Launch Time Picker: &nbsp;\n      <ShowTimelineButton\n        onClick={() => {\n          setShowTimeline(!showTimeline)\n          setMode(modeKnob as any)\n        }}\n      >\n        T\n      </ShowTimelineButton>\n      <br />\n      <br />\n      {renderDates(timePicked, dateFormatKnob, timezoneKnob)}\n      {showTimeline && (\n        <Timeline\n          min={new Date(minKnob)}\n          max={new Date(maxKnob)}\n          data={testData}\n          height={300}\n          mode={mode}\n          timezone={timezoneKnob}\n          format={dateFormatKnob}\n          heightOffset={100}\n          onCopy={(copiedValue: string) =>\n            action('clicked onCopy')(copiedValue)\n          }\n          onDone={(selectionRange: Date[]) => {\n            setShowTimeline(false)\n            action('clicked onDone')(selectionRange)\n            setTimePicked(selectionRange)\n            setMode(undefined)\n          }}\n        />\n      )}\n    </div>\n  )\n})\n","import * as d3 from 'd3'\nimport * as React from 'react'\nimport { useEffect, useRef, useState } from 'react'\nimport { Tooltip, TooltipProps } from './tooltip'\nimport {\n  convertDateToTimezoneDate,\n  range,\n  toUtc,\n  formatDate,\n  dateWithinRange,\n} from './util'\nimport { useSelectionRange } from './hooks'\nimport _ = require('lodash')\nimport { Timescale } from './types'\nimport styled from 'styled-components'\nimport { Select, MenuItem } from '../input'\nimport { lighten } from 'polished'\nimport { Button } from '../button'\nimport { readableColor } from 'polished'\n\n// Constants\nconst AXIS_MARGIN = 20\nconst AXIS_HEIGHT = 15\n\n// Color Theme\nconst ContextRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n`\n\nconst HoverLineText = styled.text`\n  fill: ${({ theme }) => readableColor(theme.backgroundContent)};\n  font-family: 'Open Sans', sans-serif;\n  pointer-events: none;\n`\n\nconst HoverLine = styled.line`\n  stroke: ${({ theme }) => theme.primaryColor};\n  stroke-width: 3;\n  pointer-events: none;\n`\nconst MarkerHover = styled.g`\n  :hover {\n    cursor: ew-resize;\n  }\n`\nconst MarkerLine = styled.line<{ hidden?: boolean }>`\n  stroke: ${(props: any) =>\n    !props.hidden\n      ? lighten(0.1, props.theme.primaryColor)\n      : 'rgba(0, 0, 0, 0)'};\n  stroke-width: ${(props: any) => (!props.hidden ? 2 : 18)};\n`\n\nconst TimelineButton = styled(Button)<{ icon?: boolean; color?: string }>`\n  display: flex;\n  justify-content: center;\n  font-family: 'Open Sans', sans-serif;\n  min-width: 3rem;\n  height: 3rem;\n\n  ${({ icon }) =>\n    !icon &&\n    `\n      font-size: 1rem;\n      padding: 0px 20px;\n      margin-left: 15px !important;\n    `} :hover {\n  }\n\n  :focus {\n    outline: none;\n  }\n`\n\nconst DateAttributeSelect = styled(Select)<{ visible?: boolean }>`\n  margin: 10px;\n  visibility: ${(props: any) => (props.visible ? 'visible' : 'hidden')};\n`\n\nconst ButtonArea = styled.div`\n  margin: 10px;\n  display: flex;\n  justify-content: flex-end;\n  margin-right: 20px;\n\n  button {\n    margin-left: 5px;\n  }\n`\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .brushBar {\n    /* This will let you select/hover records behind area, but can't brush-drag area if it's set. */\n    pointer-events: none;\n    opacity: 0.5;\n\n    /* If it's discovered that brush dragging is wanted more than hovering behind the highlighted brush area, \n    simply comment the above lines and uncomment this opacity */\n    /* opacity: 0.1; */\n    fill: ${({ theme }) => theme.primaryColor};\n    display: none;\n\n    :hover {\n      cursor: move;\n      fill: ${({ theme }) => theme.primaryColor};\n      opacity: 0.5;\n    }\n  }\n\n  .axis {\n    color: ${({ theme }) => readableColor(theme.backgroundContent)};\n    font-size: 0.9rem;\n    :hover {\n      cursor: ew-resize;\n    }\n  }\n\n  .selected {\n    fill: ${({ theme }) => theme.primaryColor} !important;\n  }\n\n  .data {\n    fill: ${({ theme: { theme } }) =>\n      theme === 'dark' ? lighten(0.7, 'black') : lighten(0.3, 'black')};\n    fill-opacity: 0.7;\n    :hover {\n      stroke-width: 2px;\n      stroke: ${({ theme }) => theme.primaryColor};\n    }\n  }\n`\n\nconst TimeText = styled.div`\n  margin: 10px;\n  font-family: 'Open Sans', sans-serif;\n  text-align: center;\n\n  br {\n    line-height: 150%;\n  }\n`\n\nconst Message = styled.span`\n  font-family: 'Open Sans', sans-serif;\n  margin: 10px;\n  color: ${({ theme }) => readableColor(theme.backgroundContent)};\n`\n\n// Helper Methods\nconst generateTooltipMessage = (data: string[]) => {\n  const titles = data.slice(0, 5).map(d => {\n    return (\n      <React.Fragment>\n        <span>{d}</span>\n        <br />\n      </React.Fragment>\n    )\n  })\n\n  const otherResults = (\n    <React.Fragment>\n      <br />\n      {`+${data.length - 5} other results`}\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      {titles}\n      {data.length > 5 && otherResults}\n    </React.Fragment>\n  )\n}\n\n/**\n * Given a d3 selection, set the display to none.\n */\nconst hideElement = (element: d3.Selection<null, unknown, null, undefined>) =>\n  element.attr('style', 'display: none')\n\n/**\n * Given a d3 selection, set the display to block.\n */\nconst showElement = (element: d3.Selection<null, unknown, null, undefined>) =>\n  element.attr('style', 'display: block')\n\n/**\n * Domain is the minimum and maximum values that the scale contains.\n */\nconst getTimescaleFromWidth = (\n  width: number,\n  min: Date = new Date('1980-01-01:00:00.000z'),\n  max: Date = new Date()\n): Timescale => {\n  const timeScale = d3\n    .scaleUtc()\n    .domain([min, max])\n    .nice()\n\n  timeScale.range([AXIS_MARGIN, width - AXIS_MARGIN])\n\n  return timeScale\n}\n\nconst getPossibleDateAttributes = (timelineItems: TimelineItem[]): string[] => {\n  return _(timelineItems)\n    .map(d => d.attributes) //{created: {display: \"Created\", value: new Date()}}\n    .flatMap(o => Object.keys(o)) //[created]\n    .uniq()\n    .value()\n}\n\n// Types\nexport type TimelineItem = {\n  id: string\n  selected: boolean\n  data?: any\n  attributes: {\n    [key: string]: Date\n  }\n}\n\ntype Bucket = {\n  x1: number\n  x2: number\n  selected: boolean\n  items: TimelineItem[]\n}\nexport interface TimelineProps {\n  /**\n   * Height in pixels.\n   */\n  height: number\n\n  /**\n   * Mode that the timeline should be in.\n   */\n  mode?: 'single' | 'range'\n\n  /**\n   * Timezone to use when displaying times.\n   */\n  timezone: string\n\n  /**\n   * Date format to use when displaying times.\n   */\n  format: string\n\n  /**\n   * TimelineItem points\n   */\n  data?: TimelineItem[]\n\n  /**\n   * Alias Map for date attributes\n   */\n  dateAttributeAliases?: { [key: string]: string }\n\n  /**\n   * Called when the done button is clicked, providing the current selection range.\n   */\n  onDone?: (selectionRange: Date[]) => void\n\n  /**\n   * Called when the a selection is made.\n   */\n  onSelect?: (data: TimelineItem[]) => void\n\n  /**\n   * Render function for tooltips\n   */\n  renderTooltip?: (data: TimelineItem[]) => any\n\n  /**\n   * Height offset to combat issues with dynamic heights when rendering the timeline.\n   */\n  heightOffset?: number\n\n  /**\n   * Called when a date is copied to the clipboard.\n   */\n  onCopy?: (copiedValue: string) => void\n\n  /**\n   * Minimum date bounds to render items between.\n   */\n  min?: Date\n\n  /**\n   * Maximum date bounds to render items between.\n   */\n  max?: Date\n}\n\n/*\n * TODOS\n * --------------------\n *\n * 1. On hover should work when the on hover is behind the area marker while still letting you brush drag (if possible)\n */\n\n// Please see https://alignedleft.com/tutorials/d3/scales for more information about d3 scales.\nexport const Timeline = (props: TimelineProps) => {\n  /**\n   * The useRef Hook creates a variable that \"holds on\" to a value across rendering\n   * passes. In this case it will hold our component's SVG DOM element. It's\n   * initialized null and React will assign it later (see the return statement)\n   */\n  const rootRef = useRef(null)\n  const d3ContainerRef = useRef(null)\n  const hoverLineRef = useRef(null)\n  const hoverLineTextRef = useRef(null)\n  const leftMarkerRef = useRef(null)\n  const rightMarkerRef = useRef(null)\n  const brushBarRef = useRef(null)\n\n  const { min, max } = props\n\n  const [width, setWidth] = useState(0)\n  const height = props.height\n\n  const heightOffset = props.heightOffset ? props.heightOffset : 0\n\n  const possibleDateAttributes = getPossibleDateAttributes(props.data || [])\n\n  const timescale = getTimescaleFromWidth(width, min, max)\n\n  const [xScale, setXScale] = useState(() => timescale)\n\n  const [xAxis, setXAxis] = useState(() =>\n    d3.axisBottom(xScale).tickSize(AXIS_HEIGHT)\n  )\n\n  const [dataBuckets, setDataBuckets] = useState<Bucket[]>([])\n  const [tooltip, setTooltip] = useState<TooltipProps | null>()\n\n  const [selectedDateAttribute, setSelectedDateAttribute] = useState<\n    string | undefined\n  >(possibleDateAttributes[0] || undefined)\n\n  useEffect(\n    () => {\n      if (selectedDateAttribute === undefined) {\n        setSelectedDateAttribute(possibleDateAttributes[0])\n      }\n    },\n    [possibleDateAttributes]\n  )\n\n  const [isDragging, setIsDragging] = useState(false)\n\n  const [selectionRange, setSelectionRange] = useSelectionRange([], timescale)\n\n  useEffect(\n    () => {\n      if (width != 0) {\n        console.debug(`Width updated to ${width}`)\n        setXScale(() => timescale)\n      }\n    },\n    [width]\n  )\n\n  useEffect(\n    () => {\n      console.debug(`xScale updated to ${xScale.range()}`)\n      const [left, right] = xScale.range()\n\n      if (left < right) {\n        const newXAxis = xAxis.scale(xScale)\n\n        setXAxis(() => newXAxis)\n        d3.select('.axis--x').call(newXAxis)\n      }\n    },\n    [xScale]\n  )\n\n  useEffect(\n    () => {\n      if (rootRef.current) {\n        // @ts-ignore\n        const rect = rootRef.current.getBoundingClientRect()\n        setWidth(rect.width)\n      }\n    },\n    [rootRef]\n  )\n\n  /**\n   * Every 100 ms, poll to see the new parent rect width.\n   * If the new parent rect width is different than current width, update the width.\n   */\n\n  useEffect(\n    () => {\n      const interval = setInterval(() => {\n        if (rootRef.current) {\n          //@ts-ignore\n          const rect = rootRef.current.getBoundingClientRect()\n          if (rect.width !== width) {\n            setWidth(rect.width)\n            clearInterval(interval)\n          }\n        }\n      }, 100)\n    },\n    [rootRef, width]\n  )\n\n  useEffect(\n    () => {\n      zoomBehavior.scaleTo(\n        // @ts-ignore\n        d3\n          .select(d3ContainerRef.current)\n          .transition()\n          .duration(0),\n        1\n      )\n    },\n    [width]\n  )\n\n  const markerHeight = height - 70 - AXIS_HEIGHT - heightOffset\n  /**\n   * When a zoom event is triggered, use the transform event to create a new xScale,\n   * then create a new xAxis using the scale and update existing xAxis\n   */\n  const handleZoom = () => {\n    // Tooltip sticks around without this.\n    setTooltip(null)\n\n    const transform = d3.event.transform\n\n    if (width != 0) {\n      const newXScale = transform.rescaleX(timescale)\n      setXScale(() => newXScale)\n\n      const newXAxis = xAxis.scale(newXScale)\n      setXAxis(() => newXAxis)\n\n      // Apply the new xAxis\n      d3.select('.axis--x').call(xAxis)\n    }\n  }\n\n  const zoomBehavior = d3\n    .zoom()\n    .scaleExtent([1, 24 * 60 * 60]) // Allows selections down to the minute at full zoom\n    .translateExtent([[0, 0], [width, height]])\n    .extent([[0, 0], [width, height]])\n    .filter(() => {\n      // If event triggered below xAxis, let default zoom behavior handle it (allows panning by dragging on axis)\n      console.debug('Click/Drag Event: ', d3.event)\n      const axisOffset = heightOffset ? heightOffset - 50 : -10\n      if (d3.event.layerY > height + AXIS_MARGIN - AXIS_HEIGHT - axisOffset) {\n        console.debug('Drag below xAxis, ignore')\n        return true\n      } else {\n        console.debug(\"Drag above xAxis, don't ignore\")\n      }\n\n      const shouldFilterEvent = d3.event.type !== 'mousedown'\n      if (!shouldFilterEvent) {\n        console.debug('Ignoring event type: ', d3.event.type)\n      }\n      return shouldFilterEvent\n    })\n    .on('zoom', handleZoom)\n\n  const zoomIn = () => {\n    zoomBehavior.scaleBy(\n      // @ts-ignore\n      d3\n        .select(d3ContainerRef.current)\n        .transition()\n        .duration(750),\n      2\n    )\n  }\n\n  const zoomOut = () => {\n    zoomBehavior.scaleBy(\n      // @ts-ignore\n      d3\n        .select(d3ContainerRef.current)\n        .transition()\n        .duration(750),\n      0.5\n    )\n  }\n\n  useEffect(\n    () => {\n      /**\n       * Range is the range of possible output values used in display.\n       * Domain maps to Range\n       * i.e. Dates map to Pixels\n       */\n      const renderInitialXAxis = () => {\n        const svg = d3\n          .select(d3ContainerRef.current)\n          .attr('width', width)\n          .attr('height', height)\n\n        svg\n          .select('.axis--x')\n          .attr(\n            'transform',\n            `translate(0 ${height -\n              (AXIS_MARGIN + AXIS_HEIGHT + heightOffset)})`\n          )\n          .call(xAxis)\n      }\n\n      if (d3ContainerRef.current) {\n        renderInitialXAxis()\n\n        const container = d3.select(d3ContainerRef.current)\n\n        //@ts-ignore\n        container.call(zoomBehavior)\n      }\n    },\n    [height, width]\n  )\n\n  // Add mouse handlers to listen to d3 mouse events\n  useEffect(\n    () => {\n      // When the d3Container mousemove event triggers, show the hover line\n      d3.select(d3ContainerRef.current).on('mousemove', function() {\n        const coord = d3.mouse(this as any)\n        d3.select(hoverLineRef.current)\n          .attr('transform', `translate(${coord[0]}, ${markerHeight})`)\n          .attr('style', 'display: block')\n\n        const hoverDate = convertDateToTimezoneDate(\n          xScale.invert(coord[0]),\n          props.format,\n          props.timezone\n        )\n\n        const formattedDate = formatDate(\n          hoverDate,\n          props.format,\n          props.timezone\n        )\n\n        const widthBuffer = 150\n        const maxX = width - widthBuffer\n        let xPos = coord[0]\n        if (xPos < widthBuffer) xPos = widthBuffer\n        if (xPos > maxX) xPos = maxX\n        const yPos = 20\n\n        d3.select(hoverLineTextRef.current)\n          .attr('transform', `translate(${xPos}, ${yPos})`)\n          .attr('style', 'display: block')\n          .attr('text-anchor', 'middle')\n          .text(formattedDate)\n      })\n\n      // When the d3Container mouseleave event triggers, set the hoverValue to null and hide the hoverLine line\n      d3.select(d3ContainerRef.current).on('mouseleave', function() {\n        hideElement(d3.select(hoverLineRef.current))\n        hideElement(d3.select(hoverLineTextRef.current))\n      })\n    },\n    [xScale, props.timezone, props.height]\n  )\n\n  // Render rectangles\n  useEffect(\n    () => {\n      const min = xScale.range()[0]\n      const max = xScale.range()[1]\n\n      const NUM_BUCKETS = Math.round(width / 30) // 30 is just a constant that I found to look good.\n\n      const bucketWidth = (max - min) / NUM_BUCKETS\n      const buckets: Bucket[] = range(NUM_BUCKETS).map(i => ({\n        x1: min + bucketWidth * i,\n        x2: min + bucketWidth * (i + 1),\n        items: [],\n        selected: false,\n      }))\n\n      if (props.data && selectedDateAttribute !== undefined) {\n        d3.selectAll('.data').remove()\n\n        props.data.forEach(d => {\n          const date = d.attributes[selectedDateAttribute!]\n          if (date == null) {\n            return\n          }\n\n          const scaledDate = xScale(date)\n\n          for (let i = 0; i < buckets.length; i++) {\n            const b = buckets[i]\n            if (b.x1 < scaledDate && scaledDate < b.x2) {\n              b.items.push(d)\n              if (d.selected) {\n                b.selected = true\n              }\n              break\n            }\n          }\n        })\n\n        const mostItemsInABucket = Math.max(...buckets.map(b => b.items.length))\n        const heightPerItem =\n          (height - (heightOffset + 75)) / mostItemsInABucket\n\n        setDataBuckets(buckets)\n\n        buckets.forEach((b, i) => {\n          const rectangleHeight = b.items.length * heightPerItem\n\n          const x = (b.x1 + b.x2) / 2 - 15\n\n          const y =\n            height -\n            rectangleHeight -\n            (AXIS_MARGIN + AXIS_HEIGHT + heightOffset)\n\n          d3.select('.data-holder')\n            .append('rect')\n            .attr('class', `data ${b.selected ? 'selected' : ''}`)\n            .attr('width', bucketWidth - 5)\n            .attr('height', rectangleHeight)\n            .attr('id', i)\n            .attr('transform', `translate(${x}, ${y})`)\n            .append('rect')\n        })\n      }\n    },\n    [props.data, xScale, selectedDateAttribute, width, height]\n  )\n\n  useEffect(\n    () => {\n      d3.select('.data-holder')\n        .selectAll('.data')\n        .on('mouseleave', function() {\n          setTooltip(null)\n        })\n        .on('mousemove', function() {\n          // @ts-ignore\n          const id = d3.select(this).node().id\n          const x = d3.event.layerX\n          const y = d3.event.layerY\n          const tooltipInBounds = x <= width * 0.75\n          setTooltip({\n            // If the tooltip will overflow off the timeline, set x to left of the cursor instead of right.\n            x: tooltipInBounds ? x + 25 : x - width * 0.25,\n            y: y - 20,\n            message: props.renderTooltip\n              ? props.renderTooltip(dataBuckets[id].items)\n              : generateTooltipMessage(dataBuckets[id].items.map(d => d.id)),\n          })\n        })\n    },\n    [dataBuckets]\n  )\n\n  // If dragging is finished, update selected results.\n  useEffect(\n    () => {\n      if (\n        !isDragging &&\n        props.data &&\n        selectedDateAttribute !== undefined &&\n        !props.mode\n      ) {\n        if (selectionRange.length == 2) {\n          const x1 = xScale(selectionRange[0])\n          const x2 = xScale(selectionRange[1])\n\n          // Prefilter to only buckets we care about\n          const bucketsContainingRelevantData = dataBuckets.filter(\n            b =>\n              (x1 < b.x1 && b.x2 < x2) ||\n              (b.x1 < x1 && x1 < b.x2) ||\n              (b.x1 < x2 && x2 < b.x2)\n          )\n\n          // Get the data inside those buckets that falls within the selection\n          const dataToSelect = _.flatMap(\n            bucketsContainingRelevantData,\n            b => b.items\n          ).filter(d =>\n            dateWithinRange(\n              d.attributes[selectedDateAttribute!],\n              selectionRange\n            )\n          )\n\n          props.onSelect && props.onSelect(dataToSelect)\n        }\n      }\n    },\n    [isDragging]\n  )\n\n  useEffect(\n    () => {\n      /**\n       *\n       * Selection Drag does two things:\n       * 1. When the user drags across the timeline, a range selection will be created.\n       * 2. If the drag event is only 5 pixels or less from start to finish AND ends on a rect object,\n       * assume that the user meant to click instead of drag, and properly trigger a click action on the rect.\n       */\n      const getSelectionDrag = () => {\n        let clickStart: number\n\n        return d3\n          .drag()\n          .on('start', () => {\n            clickStart = d3.event.x\n            const newLeftDate = convertDateToTimezoneDate(\n              xScale.invert(clickStart),\n              props.format,\n              props.timezone\n            )\n\n            if (props.mode === 'single') {\n              setSelectionRange([newLeftDate])\n            } else {\n              setIsDragging(true)\n              hideElement(d3.select(hoverLineRef.current))\n              hideElement(d3.select(hoverLineTextRef.current))\n              setSelectionRange([newLeftDate])\n            }\n          })\n\n          // Set isDragging to false to trigger a selection update, additionally check if user meant to click.\n          .on('end', () => {\n            if (!props.mode) {\n              showElement(d3.select(hoverLineRef.current))\n              setIsDragging(false)\n              const clickDistance = clickStart - d3.event.x\n              const sourceEvent = d3.event.sourceEvent\n              if (Math.abs(clickDistance) < 5) {\n                const nodeName = sourceEvent.srcElement.nodeName\n                setSelectionRange([])\n                if (nodeName === 'rect' || nodeName === 'line') {\n                  const x = d3.event.x\n                  const bucket = dataBuckets.find(b => b.x1 < x && x <= b.x2)\n                  bucket && props.onSelect && props.onSelect(bucket.items)\n                }\n              }\n            }\n          })\n          .on('drag', () => {\n            if (props.mode !== 'single') {\n              const diff = d3.event.x - d3.event.subject.x\n\n              const initialDate = convertDateToTimezoneDate(\n                xScale.invert(clickStart),\n                props.format,\n                props.timezone\n              )\n\n              let dragCurrent = clickStart + diff\n              const dragDate = convertDateToTimezoneDate(\n                xScale.invert(dragCurrent),\n                props.format,\n                props.timezone\n              )\n\n              if (diff > 0) {\n                setSelectionRange([initialDate, dragDate])\n              } else {\n                setSelectionRange([dragDate, initialDate])\n              }\n            }\n          }) as any\n      }\n\n      d3.select(d3ContainerRef.current).call(getSelectionDrag())\n    },\n    [dataBuckets, selectionRange, xScale, props.timezone]\n  )\n\n  useEffect(\n    () => {\n      /**\n       * Creates the drag behavior used when selecting the left or right slider.\n       *\n       * Validation for sliders:\n       * - Left slider cannot be within 10 pixels of the right slider.\n       * - Right slider cannot be within 10 pixels of the left slider.\n       *\n       * @param slider - Which slider the drag behavior should affect.\n       */\n      const getEdgeDrag = (slider: 'LEFT' | 'RIGHT') =>\n        d3\n          .drag()\n          .on('start', () => {\n            hideElement(d3.select(hoverLineRef.current))\n            hideElement(d3.select(hoverLineTextRef.current))\n            setIsDragging(true)\n          })\n          .on('end', () => setIsDragging(false))\n          .on('drag', () => {\n            const dragValue = xScale.invert(d3.event.x)\n\n            const dateWithTimezone = convertDateToTimezoneDate(\n              dragValue,\n              props.format,\n              props.timezone\n            )\n            const BUFFER = 10 // Buffer in pixels to keep sliders from overlapping/crossing\n\n            if (slider === 'LEFT') {\n              const maximumX = xScale(selectionRange[1]) - BUFFER\n              if (d3.event.x <= maximumX) {\n                setSelectionRange([dateWithTimezone, selectionRange[1]])\n              }\n            } else if (slider === 'RIGHT') {\n              const minimumX = xScale(selectionRange[0]) + BUFFER\n              if (d3.event.x >= minimumX) {\n                setSelectionRange([selectionRange[0], dateWithTimezone])\n              }\n            }\n          }) as any\n\n      d3.select(leftMarkerRef.current).call(getEdgeDrag('LEFT'))\n      d3.select(rightMarkerRef.current).call(getEdgeDrag('RIGHT'))\n    },\n    [xScale, selectionRange, props.timezone]\n  )\n\n  useEffect(\n    () => {\n      /**\n       * Create the drag behavior used when selecting the middle area between a range.\n       *\n       * NOTE: This will not be used if .brushBar class has 'pointer-events: none' set, as the events will never be hit.\n       */\n      const getBrushDrag = () =>\n        d3\n          .drag()\n          .on('start', () => {\n            setIsDragging(true)\n            hideElement(d3.select(hoverLineRef.current))\n            hideElement(d3.select(hoverLineTextRef.current))\n          })\n          .on('end', () => setIsDragging(false))\n          .on('drag', () => {\n            const value = d3.event.x - d3.event.subject.x\n\n            const currentLeft = xScale(selectionRange[0])\n            const currentRight = xScale(selectionRange[1])\n\n            const newLeft = currentLeft + value\n            const newRight = currentRight + value\n\n            const newLeftDate = convertDateToTimezoneDate(\n              xScale.invert(newLeft),\n              props.format,\n              props.timezone\n            )\n\n            const newRightDate = convertDateToTimezoneDate(\n              xScale.invert(newRight),\n              props.format,\n              props.timezone\n            )\n\n            setSelectionRange([newLeftDate, newRightDate])\n          }) as any\n\n      d3.select(brushBarRef.current).call(getBrushDrag())\n    },\n    [xScale, selectionRange, props.timezone]\n  )\n\n  // When the selection range is changed or the scale changes update the left, right, and brush markers\n  useEffect(\n    () => {\n      if (\n        leftMarkerRef.current &&\n        rightMarkerRef.current &&\n        brushBarRef.current\n      ) {\n        const leftMarker = d3.select(leftMarkerRef.current)\n        const rightMarker = d3.select(rightMarkerRef.current)\n        const brushBar = d3.select(brushBarRef.current)\n\n        if (props.mode === 'single' && selectionRange.length === 1) {\n          const leftMarker = d3.select(leftMarkerRef.current)\n          const leftUtc = toUtc(selectionRange[0], props.format, props.timezone)\n          leftMarker\n            .attr('transform', `translate(${xScale(leftUtc)}, ${markerHeight})`)\n            .attr('style', 'display: block')\n        } else if (props.mode !== 'single' && selectionRange.length == 2) {\n          const [leftValue, rightValue] = selectionRange\n          const leftUtc = toUtc(leftValue, props.format, props.timezone)\n          const rightUtc = toUtc(rightValue, props.format, props.timezone)\n\n          leftMarker\n            .attr('transform', `translate(${xScale(leftUtc)}, ${markerHeight})`)\n            .attr('style', 'display: block')\n\n          rightMarker\n            .attr(\n              'transform',\n              `translate(${xScale(rightUtc)}, ${markerHeight})`\n            )\n            .attr('style', 'display: block')\n\n          brushBar\n            .attr('transform', `translate(${xScale(leftUtc)},${markerHeight})`)\n            .attr('width', xScale(rightUtc) - xScale(leftUtc))\n            .attr('height', '50')\n            .attr('style', 'display: block')\n        } else {\n          hideElement(leftMarker)\n          hideElement(rightMarker)\n          hideElement(brushBar)\n        }\n      }\n    },\n    [xScale, selectionRange, props.mode, props.height, props.timezone]\n  )\n\n  const renderCopyableDate = (date: Date) => {\n    const formattedDate = formatDate(date, props.format, props.timezone)\n    return (\n      <>\n        <br />\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const hiddenTextArea = document.createElement('textarea')\n            hiddenTextArea.innerText = formattedDate\n            document.body.appendChild(hiddenTextArea)\n            hiddenTextArea.select()\n            document.execCommand('copy')\n            document.body.removeChild(hiddenTextArea)\n            props.onCopy && props.onCopy(formattedDate)\n          }}\n        >\n          {formattedDate}\n        </Button>\n      </>\n    )\n  }\n\n  const renderContext = () => {\n    const renderStartAndEnd = () => (\n      <React.Fragment>\n        <TimeText>\n          <b>Start</b>\n          {selectionRange[0] && renderCopyableDate(selectionRange[0])}\n        </TimeText>\n        <TimeText>\n          <b>End</b>\n          {selectionRange[1] && renderCopyableDate(selectionRange[1])}\n        </TimeText>\n      </React.Fragment>\n    )\n\n    // Single States - Empty, Single Time\n    if (props.mode === 'single') {\n      if (!selectionRange[0]) {\n        return (\n          <Message>Click to select a time. Zoom with the scroll wheel.</Message>\n        )\n      }\n      return (\n        <TimeText>\n          <b>Time</b>\n          {selectionRange[0] && renderCopyableDate(selectionRange[0])}\n        </TimeText>\n      )\n      // Range States - Empty, Range of Times\n    } else if (props.mode === 'range') {\n      if (!selectionRange[0]) {\n        return (\n          <Message>Drag to select a range. Zoom with the scroll wheel.</Message>\n        )\n      }\n      return renderStartAndEnd()\n      // Selection States - Empty, Start Time, Start + End Times\n    } else {\n      if (!selectionRange[0]) {\n        return (\n          <Message>\n            Click to select a cluster of results. Zoom with the scroll wheel.\n          </Message>\n        )\n      }\n      return renderStartAndEnd()\n    }\n  }\n\n  const lookupAlias = (attribute: string) => {\n    const { dateAttributeAliases } = props\n    if (dateAttributeAliases && dateAttributeAliases[attribute]) {\n      return dateAttributeAliases[attribute]\n    } else {\n      return attribute\n    }\n  }\n\n  return (\n    <Root ref={rootRef} style={{ height: '100%' }}>\n      <div>\n        <DateAttributeSelect\n          visible={props.data && props.data!.length > 0}\n          variant=\"outlined\"\n          onChange={(e: any) => setSelectedDateAttribute(e.target.value)}\n          value={selectedDateAttribute}\n        >\n          {possibleDateAttributes.map((dateAttribute: string) => (\n            <MenuItem value={dateAttribute}>\n              {lookupAlias(dateAttribute)}\n            </MenuItem>\n          ))}\n        </DateAttributeSelect>\n      </div>\n      {tooltip && (\n        <Tooltip message={tooltip.message} x={tooltip.x} y={tooltip.y} />\n      )}\n      <svg ref={d3ContainerRef}>\n        <g className=\"data-holder\" />\n\n        <rect ref={brushBarRef} className=\"brushBar\" />\n\n        <g ref={hoverLineRef} style={{ display: 'none' }}>\n          <HoverLine x1=\"0\" y1=\"0\" x2=\"0\" y2=\"50\" />\n        </g>\n\n        <HoverLineText\n          x=\"0\"\n          y=\"0\"\n          style={{ display: 'none' }}\n          ref={hoverLineTextRef}\n        />\n\n        <MarkerHover ref={leftMarkerRef}>\n          <MarkerLine x1=\"0\" y1=\"0\" x2=\"0\" y2=\"50\" />\n          <MarkerLine x1=\"0\" y1=\"0\" x2=\"0\" y2=\"50\" hidden={true} />\n        </MarkerHover>\n        <MarkerHover ref={rightMarkerRef}>\n          <MarkerLine x1=\"0\" y1=\"0\" x2=\"0\" y2=\"50\" />\n          <MarkerLine x1=\"0\" y1=\"0\" x2=\"0\" y2=\"50\" hidden={true} />\n        </MarkerHover>\n\n        <g className=\"axis axis--x\" id=\"axis\">\n          <rect\n            width={width}\n            height={AXIS_HEIGHT + AXIS_MARGIN}\n            fillOpacity=\"0\"\n            fill=\"black\"\n          />\n        </g>\n      </svg>\n      <ContextRow>\n        {renderContext()}\n        <ButtonArea>\n          <TimelineButton variant=\"contained\" onClick={() => zoomOut()} icon>\n            -\n          </TimelineButton>\n          <TimelineButton variant=\"contained\" onClick={() => zoomIn()} icon>\n            +\n          </TimelineButton>\n          {props.onDone &&\n            props.mode && (\n              <TimelineButton\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => {\n                  props.onDone && props.onDone(selectionRange)\n                  setSelectionRange([])\n                }}\n              >\n                Done\n              </TimelineButton>\n            )}\n        </ButtonArea>\n      </ContextRow>\n    </Root>\n  )\n}\n\nexport default Timeline\ntry {\n    // @ts-ignore\n    Timeline.displayName = \"Timeline\";\n    // @ts-ignore\n    Timeline.__docgenInfo = { \"description\": \"\", \"displayName\": \"Timeline\", \"props\": { \"height\": { \"defaultValue\": null, \"description\": \"Height in pixels.\", \"name\": \"height\", \"required\": true, \"type\": { \"name\": \"number\" } }, \"mode\": { \"defaultValue\": null, \"description\": \"Mode that the timeline should be in.\", \"name\": \"mode\", \"required\": false, \"type\": { \"name\": \"\\\"single\\\" | \\\"range\\\"\" } }, \"timezone\": { \"defaultValue\": null, \"description\": \"Timezone to use when displaying times.\", \"name\": \"timezone\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"format\": { \"defaultValue\": null, \"description\": \"Date format to use when displaying times.\", \"name\": \"format\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"data\": { \"defaultValue\": null, \"description\": \"TimelineItem points\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"TimelineItem[]\" } }, \"dateAttributeAliases\": { \"defaultValue\": null, \"description\": \"Alias Map for date attributes\", \"name\": \"dateAttributeAliases\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"onDone\": { \"defaultValue\": null, \"description\": \"Called when the done button is clicked, providing the current selection range.\", \"name\": \"onDone\", \"required\": false, \"type\": { \"name\": \"(selectionRange: Date[]) => void\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"Called when the a selection is made.\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(data: TimelineItem[]) => void\" } }, \"renderTooltip\": { \"defaultValue\": null, \"description\": \"Render function for tooltips\", \"name\": \"renderTooltip\", \"required\": false, \"type\": { \"name\": \"(data: TimelineItem[]) => any\" } }, \"heightOffset\": { \"defaultValue\": null, \"description\": \"Height offset to combat issues with dynamic heights when rendering the timeline.\", \"name\": \"heightOffset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onCopy\": { \"defaultValue\": null, \"description\": \"Called when a date is copied to the clipboard.\", \"name\": \"onCopy\", \"required\": false, \"type\": { \"name\": \"(copiedValue: string) => void\" } }, \"min\": { \"defaultValue\": null, \"description\": \"Minimum date bounds to render items between.\", \"name\": \"min\", \"required\": false, \"type\": { \"name\": \"Date\" } }, \"max\": { \"defaultValue\": null, \"description\": \"Maximum date bounds to render items between.\", \"name\": \"max\", \"required\": false, \"type\": { \"name\": \"Date\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/timeline.tsx#Timeline\"] = { docgenInfo: Timeline.__docgenInfo, name: \"Timeline\", path: \"atoms/timeline/timeline.tsx#Timeline\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    timeline.displayName = \"timeline\";\n    // @ts-ignore\n    timeline.__docgenInfo = { \"description\": \"\", \"displayName\": \"timeline\", \"props\": { \"height\": { \"defaultValue\": null, \"description\": \"Height in pixels.\", \"name\": \"height\", \"required\": true, \"type\": { \"name\": \"number\" } }, \"mode\": { \"defaultValue\": null, \"description\": \"Mode that the timeline should be in.\", \"name\": \"mode\", \"required\": false, \"type\": { \"name\": \"\\\"single\\\" | \\\"range\\\"\" } }, \"timezone\": { \"defaultValue\": null, \"description\": \"Timezone to use when displaying times.\", \"name\": \"timezone\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"format\": { \"defaultValue\": null, \"description\": \"Date format to use when displaying times.\", \"name\": \"format\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"data\": { \"defaultValue\": null, \"description\": \"TimelineItem points\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"TimelineItem[]\" } }, \"dateAttributeAliases\": { \"defaultValue\": null, \"description\": \"Alias Map for date attributes\", \"name\": \"dateAttributeAliases\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"onDone\": { \"defaultValue\": null, \"description\": \"Called when the done button is clicked, providing the current selection range.\", \"name\": \"onDone\", \"required\": false, \"type\": { \"name\": \"(selectionRange: Date[]) => void\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"Called when the a selection is made.\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(data: TimelineItem[]) => void\" } }, \"renderTooltip\": { \"defaultValue\": null, \"description\": \"Render function for tooltips\", \"name\": \"renderTooltip\", \"required\": false, \"type\": { \"name\": \"(data: TimelineItem[]) => any\" } }, \"heightOffset\": { \"defaultValue\": null, \"description\": \"Height offset to combat issues with dynamic heights when rendering the timeline.\", \"name\": \"heightOffset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onCopy\": { \"defaultValue\": null, \"description\": \"Called when a date is copied to the clipboard.\", \"name\": \"onCopy\", \"required\": false, \"type\": { \"name\": \"(copiedValue: string) => void\" } }, \"min\": { \"defaultValue\": null, \"description\": \"Minimum date bounds to render items between.\", \"name\": \"min\", \"required\": false, \"type\": { \"name\": \"Date\" } }, \"max\": { \"defaultValue\": null, \"description\": \"Maximum date bounds to render items between.\", \"name\": \"max\", \"required\": false, \"type\": { \"name\": \"Date\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/timeline.tsx#timeline\"] = { docgenInfo: timeline.__docgenInfo, name: \"timeline\", path: \"atoms/timeline/timeline.tsx#timeline\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react'\nimport styled from 'styled-components'\n\nconst Root = styled.div<{ pos: { x: number; y: number } }>`\n  position: absolute;\n  top: ${(props: any) => props.pos.y}px;\n  left: ${(props: any) => props.pos.x}px;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.7);\n  max-width: 30%;\n  border-radius: 8px;\n  padding: 10px;\n  z-index: 1;\n  pointer-events: none;\n`\n\nexport type TooltipProps = {\n  x: number\n  y: number\n  message: string | any\n}\n\nexport const Tooltip = (props: TooltipProps) => {\n  const { x, y, message } = props\n  return (\n    <Root pos={{ x, y }}>\n      <span>{message}</span>\n    </Root>\n  )\n}\ntry {\n    // @ts-ignore\n    Tooltip.displayName = \"Tooltip\";\n    // @ts-ignore\n    Tooltip.__docgenInfo = { \"description\": \"\", \"displayName\": \"Tooltip\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/tooltip.tsx#Tooltip\"] = { docgenInfo: Tooltip.__docgenInfo, name: \"Tooltip\", path: \"atoms/timeline/tooltip.tsx#Tooltip\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","const moment = require('moment-timezone')\nimport { TimelineItem } from './timeline'\n\n/** Python's \"range\" function */\nexport const range = (n: number) => Array.from(Array(n).keys())\n\nconst getDataPoint = (\n  num: number,\n  createdYear: number,\n  modifiedYear: number,\n  publishedYear: number\n) => {\n  const month = Math.floor(Math.random() * 12)\n  const year = Math.floor(Math.random() * 40)\n  const day = Math.floor(Math.random() * 28)\n\n  return {\n    id: `Result ${(num + 1).toString()}`,\n    selected: false,\n    attributes: {\n      created: moment(new Date(createdYear + year, 0, 1))\n        .add(month, 'months')\n        .add(day, 'days')\n        .toDate(),\n\n      modified: moment(new Date(modifiedYear + year, 0, 1)).toDate(),\n\n      published_date: moment(new Date(publishedYear + year, 0, 1))\n        .add(day, 'days')\n        .toDate(),\n    },\n  }\n}\n\nexport const createTestData = (n: number): TimelineItem[] => {\n  if (typeof n !== 'number' || n < 1) {\n    return []\n  }\n\n  return range(n).map(num => getDataPoint(num, 1980, 1983, 1987))\n}\n\n/**\n * Convert a given date to UTC to render correctly on the Timeline.\n *\n * @param value Moment time object.\n * @param timezone Timezone the incoming value is in.\n */\n// TODO: Make this use the timezone\nexport const toUtc = (value: Date, format: string, timezone: string = '') => {\n  const momentValue = moment.tz(value, timezone)\n  const utcOffsetMinutes = momentValue.utcOffset()\n  momentValue.add(utcOffsetMinutes, 'minutes').format(format)\n  return momentValue.toDate()\n}\n\n/**\n *\n * @param time UTC time\n * @param timezone Timezone to convert the incoming value to.\n */\nexport const convertDateToTimezoneDate = (\n  time: Date,\n  format: string,\n  timezone: string\n): Date => {\n  const momentValue = moment.tz(time, timezone)\n  const utcOffsetMinutes = momentValue.utcOffset()\n  momentValue.subtract(utcOffsetMinutes, 'minutes').format(format)\n  return momentValue.toDate()\n}\n\nexport const formatDate = (value: Date, format: string, timezone: string) =>\n  moment.tz(value, format, timezone).format(format)\n\nexport const dateWithinRange = (date: Date, range: Date[]) =>\n  range[0] < date && date < range[1]\ntry {\n    // @ts-ignore\n    range.displayName = \"range\";\n    // @ts-ignore\n    range.__docgenInfo = { \"description\": \"Python's \\\"range\\\" function\", \"displayName\": \"range\", \"props\": { \"toString\": { \"defaultValue\": null, \"description\": \"Returns a string representation of an object.\\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\", \"name\": \"toString\", \"required\": true, \"type\": { \"name\": \"(radix?: number) => string\" } }, \"toFixed\": { \"defaultValue\": null, \"description\": \"Returns a string representing a number in fixed-point notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toFixed\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toExponential\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented in exponential notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toExponential\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toPrecision\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\", \"name\": \"toPrecision\", \"required\": true, \"type\": { \"name\": \"(precision?: number) => string\" } }, \"valueOf\": { \"defaultValue\": null, \"description\": \"Returns the primitive value of the specified object.\", \"name\": \"valueOf\", \"required\": true, \"type\": { \"name\": \"() => number\" } }, \"toLocaleString\": { \"defaultValue\": null, \"description\": \"Converts a number to a string by using the current or specified locale.\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\n@param options An object that contains one or more properties that specify comparison options.\", \"name\": \"toLocaleString\", \"required\": true, \"type\": { \"name\": \"(locales?: string | string[], options?: NumberFormatOptions) => string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/util.tsx#range\"] = { docgenInfo: range.__docgenInfo, name: \"range\", path: \"atoms/timeline/util.tsx#range\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    createTestData.displayName = \"createTestData\";\n    // @ts-ignore\n    createTestData.__docgenInfo = { \"description\": \"\", \"displayName\": \"createTestData\", \"props\": { \"toString\": { \"defaultValue\": null, \"description\": \"Returns a string representation of an object.\\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\", \"name\": \"toString\", \"required\": true, \"type\": { \"name\": \"(radix?: number) => string\" } }, \"toFixed\": { \"defaultValue\": null, \"description\": \"Returns a string representing a number in fixed-point notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toFixed\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toExponential\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented in exponential notation.\\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\", \"name\": \"toExponential\", \"required\": true, \"type\": { \"name\": \"(fractionDigits?: number) => string\" } }, \"toPrecision\": { \"defaultValue\": null, \"description\": \"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\", \"name\": \"toPrecision\", \"required\": true, \"type\": { \"name\": \"(precision?: number) => string\" } }, \"valueOf\": { \"defaultValue\": null, \"description\": \"Returns the primitive value of the specified object.\", \"name\": \"valueOf\", \"required\": true, \"type\": { \"name\": \"() => number\" } }, \"toLocaleString\": { \"defaultValue\": null, \"description\": \"Converts a number to a string by using the current or specified locale.\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\\n@param options An object that contains one or more properties that specify comparison options.\", \"name\": \"toLocaleString\", \"required\": true, \"type\": { \"name\": \"(locales?: string | string[], options?: NumberFormatOptions) => string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/util.tsx#createTestData\"] = { docgenInfo: createTestData.__docgenInfo, name: \"createTestData\", path: \"atoms/timeline/util.tsx#createTestData\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    toUtc.displayName = \"toUtc\";\n    // @ts-ignore\n    toUtc.__docgenInfo = { \"description\": \"Convert a given date to UTC to render correctly on the Timeline.\\n@param value Moment time object.\\n@param timezone Timezone the incoming value is in.\", \"displayName\": \"toUtc\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/util.tsx#toUtc\"] = { docgenInfo: toUtc.__docgenInfo, name: \"toUtc\", path: \"atoms/timeline/util.tsx#toUtc\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    convertDateToTimezoneDate.displayName = \"convertDateToTimezoneDate\";\n    // @ts-ignore\n    convertDateToTimezoneDate.__docgenInfo = { \"description\": \"@param time UTC time\\n@param timezone Timezone to convert the incoming value to.\", \"displayName\": \"convertDateToTimezoneDate\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"atoms/timeline/util.tsx#convertDateToTimezoneDate\"] = { docgenInfo: convertDateToTimezoneDate.__docgenInfo, name: \"convertDateToTimezoneDate\", path: \"atoms/timeline/util.tsx#convertDateToTimezoneDate\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { WrappedTypography as Typography } from './typography'\n","import * as React from 'react'\nimport Typography, { TypographyProps } from '@material-ui/core/Typography'\nimport styled from 'styled-components'\n\nexport const WrappedTypography = styled(\n  React.forwardRef((props: TypographyProps, ref: React.Ref<any>) => {\n    return <Typography {...props} ref={ref} />\n  })\n)<TypographyProps>`` as React.ComponentType<TypographyProps>\n","import * as React from 'react'\nexport const ZeroWidthSpace = () => {\n  return <>{String.fromCharCode(8203)}</>\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","var map = {\n\t\"./nestedObjectAssign\": \"./node_modules/nested-object-assign/lib/nestedObjectAssign.js\",\n\t\"./nestedObjectAssign.js\": \"./node_modules/nested-object-assign/lib/nestedObjectAssign.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/nested-object-assign/lib sync recursive ^\\\\.\\\\/.*$\";","import { storiesOf as of } from '@connexta/ace/@storybook/react'\n\nimport { withTheme } from './theme-decorator'\n\nexport const storiesOf = (name: string, m: NodeModule) => {\n  const stories = of(name, m)\n  stories.addDecorator(withTheme as any)\n  return stories\n}\n","import { select } from '@connexta/ace/@storybook/addon-knobs'\nimport { StoryDecorator } from '@storybook/react'\nimport * as React from 'react'\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components'\nimport { Paper } from '../atoms/paper'\nimport { ThemeProvider as MuiThemeProvider } from '../atoms/theme'\nimport { ThemeColorInterface, ThemeName } from '../styled/theme'\n\ntype ColorMode = 'light' | 'dark'\n\nconst darkTheme: ThemeColorInterface = {\n  primaryColor: '#32a6ad',\n  positiveColor: '#5b963e',\n  negativeColor: '#943838',\n  warningColor: '#decd39',\n  favoriteColor: '#d1d179',\n  backgroundNavigation: '#213137',\n  backgroundAccentContent: '#34434c',\n  backgroundDropdown: '#253540',\n  backgroundContent: '#253540',\n  backgroundModal: '#253540',\n  backgroundSlideout: '#435059',\n}\n\nconst lightTheme: ThemeColorInterface = {\n  primaryColor: '#3c6dd5',\n  positiveColor: '#428442',\n  negativeColor: '#8a423c',\n  warningColor: '#c89600',\n  favoriteColor: '#d1d179',\n  backgroundNavigation: '#3c6dd5',\n  backgroundAccentContent: '#edf9fc',\n  backgroundDropdown: '#f3fdff',\n  backgroundContent: '#f3fdff',\n  backgroundModal: '#edf9fc',\n  backgroundSlideout: '#edf9fc',\n}\n\nconst DefaultThemeProvider = (props: {\n  children: any\n  paletteType: string\n}) => {\n  const { paletteType, children } = props\n\n  let styledTheme: ThemeColorInterface & ThemeName\n  if (paletteType === 'dark') {\n    styledTheme = {\n      ...darkTheme,\n      theme: paletteType,\n    }\n  } else {\n    styledTheme = {\n      ...lightTheme,\n      theme: paletteType,\n    }\n  }\n\n  return (\n    <StyledThemeProvider theme={styledTheme}>\n      <MuiThemeProvider>\n        <Paper style={{ padding: '40px' }}>{children}</Paper>\n      </MuiThemeProvider>\n    </StyledThemeProvider>\n  )\n}\n\nexport const withTheme: StoryDecorator = (Component: any) => {\n  const themes = select(\n    'Theme',\n    {\n      Light: ['light'],\n      Dark: ['dark'],\n      // Both: ['dark', 'light'], //TODO: Figure out how to show both at the same time.\n    },\n    ['light']\n  ) as ColorMode[]\n\n  return (\n    <React.Fragment>\n      {themes.map(t => {\n        return (\n          <DefaultThemeProvider paletteType={t}>\n            <Component />\n          </DefaultThemeProvider>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAMA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;AAIA;AAQA;AAIA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAEA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAOA;AAIA;AACA;AAMA;AAIA;AAEA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;AASA;AAEA;AACA;AAQA;AAEA;AACA;AAKA;AAEA;AACA;AAKA;AACA;AAKA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AASA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnXA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;ACxCA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAMA;AAKA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAKA;AAGA;AAGA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAKA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAOA;AAGA;AAEA;AAGA;AAOA;AAIA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAGA;;;;;;;AAOA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAIA;AAGA;AA2BA;AAQA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9JA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;ACPA;AACA;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AAIA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAGA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;ACTA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AASA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AAIA;AAGA;AACA;AAGA;AAKA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpCA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAQA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;;;;AAIA;;;AAIA;;;;;;;;;;;;;;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAxBA;AAIA;AACA;AACA;AACA;AAmBA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AAEA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;;;;;;;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAQA;AAQA;AAKA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AAIA;AAGA;AAEA;AAgBA;AAGA;AACA;AAHA;AACA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAgFA;AACA;AACA;AACA;AAnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAKA;AAMA;AACA;AACA;AAGA;AACA;AACA;AAOA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1dA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;AC7BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAEA;;AAGA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;AAIA;AAEA;AACA;;;AAGA;AAEA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;;;;AAIA;;;;;;AAMA;AAEA;;AAEA;AACA;AAEA;;;;;;;;;AASA;AAEA;;;;;;;;;;;;AAYA;;;;;AAKA;;;;;;AAMA;;;;;;;;AAQA;;;;AAIA;;;;AAKA;;;AAGA;AAEA;;;;;;;;AAQA;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AAGA;AAEA;;AAEA;AACA;AAGA;;AAEA;AACA;AAGA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAqFA;;;;;AAKA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AAUA;AACA;AACA;AACA;AAIA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;;;;;;;;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAMA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAaA;AAGA;AACA;AAEA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAKA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/lCA;AACA;AAEA;;AAEA;AACA;;;;;;;;AAQA;AAQA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxCA;AAGA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrHA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAIA;AAAA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AAGA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}